{"ast":null,"code":"/*\n    FIGlet.js (a FIGDriver for FIGlet fonts)\n    By Patrick Gillespie (patorjk@gmail.com)\n    Originally Written For: http://patorjk.com/software/taag/\n    License: MIT (with this header staying intact)\n\n    This JavaScript code aims to fully implement the FIGlet spec.\n    Full FIGlet spec: http://patorjk.com/software/taag/docs/figfont.txt\n\n    FIGlet fonts are actually kind of complex, which is why you will see\n    a lot of code about parsing and interpreting rules. The actual generation\n    code is pretty simple and is done near the bottom of the code.\n*/\n\"use strict\";\n\nvar figlet = figlet || function () {\n  // ---------------------------------------------------------------------\n  // Private static variables\n  var FULL_WIDTH = 0,\n      FITTING = 1,\n      SMUSHING = 2,\n      CONTROLLED_SMUSHING = 3; // ---------------------------------------------------------------------\n  // Variable that will hold information about the fonts\n\n  var figFonts = {}; // What stores all of the FIGlet font data\n\n  var figDefaults = {\n    font: 'Standard',\n    fontPath: './fonts'\n  }; // ---------------------------------------------------------------------\n  // Private static methods\n\n  /*\n      This method takes in the oldLayout and newLayout data from the FIGfont header file and returns\n      the layout information.\n  */\n\n  function getSmushingRules(oldLayout, newLayout) {\n    var rules = {};\n    var val, index, len, code;\n    var codes = [[16384, \"vLayout\", SMUSHING], [8192, \"vLayout\", FITTING], [4096, \"vRule5\", true], [2048, \"vRule4\", true], [1024, \"vRule3\", true], [512, \"vRule2\", true], [256, \"vRule1\", true], [128, \"hLayout\", SMUSHING], [64, \"hLayout\", FITTING], [32, \"hRule6\", true], [16, \"hRule5\", true], [8, \"hRule4\", true], [4, \"hRule3\", true], [2, \"hRule2\", true], [1, \"hRule1\", true]];\n    val = newLayout !== null ? newLayout : oldLayout;\n    index = 0;\n    len = codes.length;\n\n    while (index < len) {\n      code = codes[index];\n\n      if (val >= code[0]) {\n        val = val - code[0];\n        rules[code[1]] = typeof rules[code[1]] === \"undefined\" ? code[2] : rules[code[1]];\n      } else if (code[1] !== \"vLayout\" && code[1] !== \"hLayout\") {\n        rules[code[1]] = false;\n      }\n\n      index++;\n    }\n\n    if (typeof rules[\"hLayout\"] === \"undefined\") {\n      if (oldLayout === 0) {\n        rules[\"hLayout\"] = FITTING;\n      } else if (oldLayout === -1) {\n        rules[\"hLayout\"] = FULL_WIDTH;\n      } else {\n        if (rules[\"hRule1\"] || rules[\"hRule2\"] || rules[\"hRule3\"] || rules[\"hRule4\"] || rules[\"hRule5\"] || rules[\"hRule6\"]) {\n          rules[\"hLayout\"] = CONTROLLED_SMUSHING;\n        } else {\n          rules[\"hLayout\"] = SMUSHING;\n        }\n      }\n    } else if (rules[\"hLayout\"] === SMUSHING) {\n      if (rules[\"hRule1\"] || rules[\"hRule2\"] || rules[\"hRule3\"] || rules[\"hRule4\"] || rules[\"hRule5\"] || rules[\"hRule6\"]) {\n        rules[\"hLayout\"] = CONTROLLED_SMUSHING;\n      }\n    }\n\n    if (typeof rules[\"vLayout\"] === \"undefined\") {\n      if (rules[\"vRule1\"] || rules[\"vRule2\"] || rules[\"vRule3\"] || rules[\"vRule4\"] || rules[\"vRule5\"]) {\n        rules[\"vLayout\"] = CONTROLLED_SMUSHING;\n      } else {\n        rules[\"vLayout\"] = FULL_WIDTH;\n      }\n    } else if (rules[\"vLayout\"] === SMUSHING) {\n      if (rules[\"vRule1\"] || rules[\"vRule2\"] || rules[\"vRule3\"] || rules[\"vRule4\"] || rules[\"vRule5\"]) {\n        rules[\"vLayout\"] = CONTROLLED_SMUSHING;\n      }\n    }\n\n    return rules;\n  }\n  /* The [vh]Rule[1-6]_Smush functions return the smushed character OR false if the two characters can't be smushed */\n\n  /*\n      Rule 1: EQUAL CHARACTER SMUSHING (code value 1)\n           Two sub-characters are smushed into a single sub-character\n          if they are the same.  This rule does not smush\n          hardblanks.  (See rule 6 on hardblanks below)\n  */\n\n\n  function hRule1_Smush(ch1, ch2, hardBlank) {\n    if (ch1 === ch2 && ch1 !== hardBlank) {\n      return ch1;\n    }\n\n    return false;\n  }\n  /*\n      Rule 2: UNDERSCORE SMUSHING (code value 2)\n           An underscore (\"_\") will be replaced by any of: \"|\", \"/\",\n          \"\\\", \"[\", \"]\", \"{\", \"}\", \"(\", \")\", \"<\" or \">\".\n  */\n\n\n  function hRule2_Smush(ch1, ch2) {\n    var rule2Str = \"|/\\\\[]{}()<>\";\n\n    if (ch1 === \"_\") {\n      if (rule2Str.indexOf(ch2) !== -1) {\n        return ch2;\n      }\n    } else if (ch2 === \"_\") {\n      if (rule2Str.indexOf(ch1) !== -1) {\n        return ch1;\n      }\n    }\n\n    return false;\n  }\n  /*\n      Rule 3: HIERARCHY SMUSHING (code value 4)\n           A hierarchy of six classes is used: \"|\", \"/\\\", \"[]\", \"{}\",\n          \"()\", and \"<>\".  When two smushing sub-characters are\n          from different classes, the one from the latter class\n          will be used.\n  */\n\n\n  function hRule3_Smush(ch1, ch2) {\n    var rule3Classes = \"| /\\\\ [] {} () <>\";\n    var r3_pos1 = rule3Classes.indexOf(ch1);\n    var r3_pos2 = rule3Classes.indexOf(ch2);\n\n    if (r3_pos1 !== -1 && r3_pos2 !== -1) {\n      if (r3_pos1 !== r3_pos2 && Math.abs(r3_pos1 - r3_pos2) !== 1) {\n        return rule3Classes.substr(Math.max(r3_pos1, r3_pos2), 1);\n      }\n    }\n\n    return false;\n  }\n  /*\n      Rule 4: OPPOSITE PAIR SMUSHING (code value 8)\n           Smushes opposing brackets (\"[]\" or \"][\"), braces (\"{}\" or\n          \"}{\") and parentheses (\"()\" or \")(\") together, replacing\n          any such pair with a vertical bar (\"|\").\n  */\n\n\n  function hRule4_Smush(ch1, ch2) {\n    var rule4Str = \"[] {} ()\";\n    var r4_pos1 = rule4Str.indexOf(ch1);\n    var r4_pos2 = rule4Str.indexOf(ch2);\n\n    if (r4_pos1 !== -1 && r4_pos2 !== -1) {\n      if (Math.abs(r4_pos1 - r4_pos2) <= 1) {\n        return \"|\";\n      }\n    }\n\n    return false;\n  }\n  /*\n      Rule 5: BIG X SMUSHING (code value 16)\n           Smushes \"/\\\" into \"|\", \"\\/\" into \"Y\", and \"><\" into \"X\".\n          Note that \"<>\" is not smushed in any way by this rule.\n          The name \"BIG X\" is historical; originally all three pairs\n          were smushed into \"X\".\n  */\n\n\n  function hRule5_Smush(ch1, ch2) {\n    var rule5Str = \"/\\\\ \\\\/ ><\";\n    var rule5Hash = {\n      \"0\": \"|\",\n      \"3\": \"Y\",\n      \"6\": \"X\"\n    };\n    var r5_pos1 = rule5Str.indexOf(ch1);\n    var r5_pos2 = rule5Str.indexOf(ch2);\n\n    if (r5_pos1 !== -1 && r5_pos2 !== -1) {\n      if (r5_pos2 - r5_pos1 === 1) {\n        return rule5Hash[r5_pos1];\n      }\n    }\n\n    return false;\n  }\n  /*\n      Rule 6: HARDBLANK SMUSHING (code value 32)\n           Smushes two hardblanks together, replacing them with a\n          single hardblank.  (See \"Hardblanks\" below.)\n  */\n\n\n  function hRule6_Smush(ch1, ch2, hardBlank) {\n    if (ch1 === hardBlank && ch2 === hardBlank) {\n      return hardBlank;\n    }\n\n    return false;\n  }\n  /*\n      Rule 1: EQUAL CHARACTER SMUSHING (code value 256)\n           Same as horizontal smushing rule 1.\n  */\n\n\n  function vRule1_Smush(ch1, ch2) {\n    if (ch1 === ch2) {\n      return ch1;\n    }\n\n    return false;\n  }\n  /*\n      Rule 2: UNDERSCORE SMUSHING (code value 512)\n           Same as horizontal smushing rule 2.\n  */\n\n\n  function vRule2_Smush(ch1, ch2) {\n    var rule2Str = \"|/\\\\[]{}()<>\";\n\n    if (ch1 === \"_\") {\n      if (rule2Str.indexOf(ch2) !== -1) {\n        return ch2;\n      }\n    } else if (ch2 === \"_\") {\n      if (rule2Str.indexOf(ch1) !== -1) {\n        return ch1;\n      }\n    }\n\n    return false;\n  }\n  /*\n      Rule 3: HIERARCHY SMUSHING (code value 1024)\n           Same as horizontal smushing rule 3.\n  */\n\n\n  function vRule3_Smush(ch1, ch2) {\n    var rule3Classes = \"| /\\\\ [] {} () <>\";\n    var r3_pos1 = rule3Classes.indexOf(ch1);\n    var r3_pos2 = rule3Classes.indexOf(ch2);\n\n    if (r3_pos1 !== -1 && r3_pos2 !== -1) {\n      if (r3_pos1 !== r3_pos2 && Math.abs(r3_pos1 - r3_pos2) !== 1) {\n        return rule3Classes.substr(Math.max(r3_pos1, r3_pos2), 1);\n      }\n    }\n\n    return false;\n  }\n  /*\n      Rule 4: HORIZONTAL LINE SMUSHING (code value 2048)\n           Smushes stacked pairs of \"-\" and \"_\", replacing them with\n          a single \"=\" sub-character.  It does not matter which is\n          found above the other.  Note that vertical smushing rule 1\n          will smush IDENTICAL pairs of horizontal lines, while this\n          rule smushes horizontal lines consisting of DIFFERENT\n          sub-characters.\n  */\n\n\n  function vRule4_Smush(ch1, ch2) {\n    if (ch1 === \"-\" && ch2 === \"_\" || ch1 === \"_\" && ch2 === \"-\") {\n      return \"=\";\n    }\n\n    return false;\n  }\n  /*\n      Rule 5: VERTICAL LINE SUPERSMUSHING (code value 4096)\n           This one rule is different from all others, in that it\n          \"supersmushes\" vertical lines consisting of several\n          vertical bars (\"|\").  This creates the illusion that\n          FIGcharacters have slid vertically against each other.\n          Supersmushing continues until any sub-characters other\n          than \"|\" would have to be smushed.  Supersmushing can\n          produce impressive results, but it is seldom possible,\n          since other sub-characters would usually have to be\n          considered for smushing as soon as any such stacked\n          vertical lines are encountered.\n  */\n\n\n  function vRule5_Smush(ch1, ch2) {\n    if (ch1 === \"|\" && ch2 === \"|\") {\n      return \"|\";\n    }\n\n    return false;\n  }\n  /*\n      Universal smushing simply overrides the sub-character from the\n      earlier FIGcharacter with the sub-character from the later\n      FIGcharacter.  This produces an \"overlapping\" effect with some\n      FIGfonts, wherin the latter FIGcharacter may appear to be \"in\n      front\".\n  */\n\n\n  function uni_Smush(ch1, ch2, hardBlank) {\n    if (ch2 === \" \" || ch2 === \"\") {\n      return ch1;\n    } else if (ch2 === hardBlank && ch1 !== \" \") {\n      return ch1;\n    } else {\n      return ch2;\n    }\n  } // --------------------------------------------------------------------------\n  // main vertical smush routines (excluding rules)\n\n  /*\n      txt1 - A line of text\n      txt2 - A line of text\n      opts - FIGlet options array\n       About: Takes in two lines of text and returns one of the following:\n      \"valid\" - These lines can be smushed together given the current smushing rules\n      \"end\" - The lines can be smushed, but we're at a stopping point\n      \"invalid\" - The two lines cannot be smushed together\n  */\n\n\n  function canVerticalSmush(txt1, txt2, opts) {\n    if (opts.fittingRules.vLayout === FULL_WIDTH) {\n      return \"invalid\";\n    }\n\n    var ii,\n        len = Math.min(txt1.length, txt2.length);\n    var ch1,\n        ch2,\n        endSmush = false,\n        validSmush;\n\n    if (len === 0) {\n      return \"invalid\";\n    }\n\n    for (ii = 0; ii < len; ii++) {\n      ch1 = txt1.substr(ii, 1);\n      ch2 = txt2.substr(ii, 1);\n\n      if (ch1 !== \" \" && ch2 !== \" \") {\n        if (opts.fittingRules.vLayout === FITTING) {\n          return \"invalid\";\n        } else if (opts.fittingRules.vLayout === SMUSHING) {\n          return \"end\";\n        } else {\n          if (vRule5_Smush(ch1, ch2)) {\n            endSmush = endSmush || false;\n            continue;\n          } // rule 5 allow for \"super\" smushing, but only if we're not already ending this smush\n\n\n          validSmush = false;\n          validSmush = opts.fittingRules.vRule1 ? vRule1_Smush(ch1, ch2) : validSmush;\n          validSmush = !validSmush && opts.fittingRules.vRule2 ? vRule2_Smush(ch1, ch2) : validSmush;\n          validSmush = !validSmush && opts.fittingRules.vRule3 ? vRule3_Smush(ch1, ch2) : validSmush;\n          validSmush = !validSmush && opts.fittingRules.vRule4 ? vRule4_Smush(ch1, ch2) : validSmush;\n          endSmush = true;\n\n          if (!validSmush) {\n            return \"invalid\";\n          }\n        }\n      }\n    }\n\n    if (endSmush) {\n      return \"end\";\n    } else {\n      return \"valid\";\n    }\n  }\n\n  function getVerticalSmushDist(lines1, lines2, opts) {\n    var maxDist = lines1.length;\n    var len1 = lines1.length;\n    var len2 = lines2.length;\n    var subLines1, subLines2, slen;\n    var curDist = 1;\n    var ii, ret, result;\n\n    while (curDist <= maxDist) {\n      subLines1 = lines1.slice(Math.max(0, len1 - curDist), len1);\n      subLines2 = lines2.slice(0, Math.min(maxDist, curDist));\n      slen = subLines2.length; //TODO:check this\n\n      result = \"\";\n\n      for (ii = 0; ii < slen; ii++) {\n        ret = canVerticalSmush(subLines1[ii], subLines2[ii], opts);\n\n        if (ret === \"end\") {\n          result = ret;\n        } else if (ret === \"invalid\") {\n          result = ret;\n          break;\n        } else {\n          if (result === \"\") {\n            result = \"valid\";\n          }\n        }\n      }\n\n      if (result === \"invalid\") {\n        curDist--;\n        break;\n      }\n\n      if (result === \"end\") {\n        break;\n      }\n\n      if (result === \"valid\") {\n        curDist++;\n      }\n    }\n\n    return Math.min(maxDist, curDist);\n  }\n\n  function verticallySmushLines(line1, line2, opts) {\n    var ii,\n        len = Math.min(line1.length, line2.length);\n    var ch1,\n        ch2,\n        result = \"\",\n        validSmush;\n\n    for (ii = 0; ii < len; ii++) {\n      ch1 = line1.substr(ii, 1);\n      ch2 = line2.substr(ii, 1);\n\n      if (ch1 !== \" \" && ch2 !== \" \") {\n        if (opts.fittingRules.vLayout === FITTING) {\n          result += uni_Smush(ch1, ch2);\n        } else if (opts.fittingRules.vLayout === SMUSHING) {\n          result += uni_Smush(ch1, ch2);\n        } else {\n          validSmush = false;\n          validSmush = opts.fittingRules.vRule5 ? vRule5_Smush(ch1, ch2) : validSmush;\n          validSmush = !validSmush && opts.fittingRules.vRule1 ? vRule1_Smush(ch1, ch2) : validSmush;\n          validSmush = !validSmush && opts.fittingRules.vRule2 ? vRule2_Smush(ch1, ch2) : validSmush;\n          validSmush = !validSmush && opts.fittingRules.vRule3 ? vRule3_Smush(ch1, ch2) : validSmush;\n          validSmush = !validSmush && opts.fittingRules.vRule4 ? vRule4_Smush(ch1, ch2) : validSmush;\n          result += validSmush;\n        }\n      } else {\n        result += uni_Smush(ch1, ch2);\n      }\n    }\n\n    return result;\n  }\n\n  function verticalSmush(lines1, lines2, overlap, opts) {\n    var len1 = lines1.length;\n    var len2 = lines2.length;\n    var piece1 = lines1.slice(0, Math.max(0, len1 - overlap));\n    var piece2_1 = lines1.slice(Math.max(0, len1 - overlap), len1);\n    var piece2_2 = lines2.slice(0, Math.min(overlap, len2));\n    var ii,\n        len,\n        line,\n        piece2 = [],\n        piece3,\n        result = [];\n    len = piece2_1.length;\n\n    for (ii = 0; ii < len; ii++) {\n      if (ii >= len2) {\n        line = piece2_1[ii];\n      } else {\n        line = verticallySmushLines(piece2_1[ii], piece2_2[ii], opts);\n      }\n\n      piece2.push(line);\n    }\n\n    piece3 = lines2.slice(Math.min(overlap, len2), len2);\n    return result.concat(piece1, piece2, piece3);\n  }\n\n  function padLines(lines, numSpaces) {\n    var ii,\n        len = lines.length,\n        padding = \"\";\n\n    for (ii = 0; ii < numSpaces; ii++) {\n      padding += \" \";\n    }\n\n    for (ii = 0; ii < len; ii++) {\n      lines[ii] += padding;\n    }\n  }\n\n  function smushVerticalFigLines(output, lines, opts) {\n    var len1 = output[0].length;\n    var len2 = lines[0].length;\n    var overlap;\n\n    if (len1 > len2) {\n      padLines(lines, len1 - len2);\n    } else if (len2 > len1) {\n      padLines(output, len2 - len1);\n    }\n\n    overlap = getVerticalSmushDist(output, lines, opts);\n    return verticalSmush(output, lines, overlap, opts);\n  } // -------------------------------------------------------------------------\n  // Main horizontal smush routines (excluding rules)\n\n\n  function getHorizontalSmushLength(txt1, txt2, opts) {\n    if (opts.fittingRules.hLayout === FULL_WIDTH) {\n      return 0;\n    }\n\n    var ii,\n        len1 = txt1.length,\n        len2 = txt2.length;\n    var maxDist = len1;\n    var curDist = 1;\n    var breakAfter = false;\n    var validSmush = false;\n    var seg1, seg2, ch1, ch2;\n\n    if (len1 === 0) {\n      return 0;\n    }\n\n    distCal: while (curDist <= maxDist) {\n      seg1 = txt1.substr(len1 - curDist, curDist);\n      seg2 = txt2.substr(0, Math.min(curDist, len2));\n\n      for (ii = 0; ii < Math.min(curDist, len2); ii++) {\n        ch1 = seg1.substr(ii, 1);\n        ch2 = seg2.substr(ii, 1);\n\n        if (ch1 !== \" \" && ch2 !== \" \") {\n          if (opts.fittingRules.hLayout === FITTING) {\n            curDist = curDist - 1;\n            break distCal;\n          } else if (opts.fittingRules.hLayout === SMUSHING) {\n            if (ch1 === opts.hardBlank || ch2 === opts.hardBlank) {\n              curDist = curDist - 1; // universal smushing does not smush hardblanks\n            }\n\n            break distCal;\n          } else {\n            breakAfter = true; // we know we need to break, but we need to check if our smushing rules will allow us to smush the overlapped characters\n\n            validSmush = false; // the below checks will let us know if we can smush these characters\n\n            validSmush = opts.fittingRules.hRule1 ? hRule1_Smush(ch1, ch2, opts.hardBlank) : validSmush;\n            validSmush = !validSmush && opts.fittingRules.hRule2 ? hRule2_Smush(ch1, ch2, opts.hardBlank) : validSmush;\n            validSmush = !validSmush && opts.fittingRules.hRule3 ? hRule3_Smush(ch1, ch2, opts.hardBlank) : validSmush;\n            validSmush = !validSmush && opts.fittingRules.hRule4 ? hRule4_Smush(ch1, ch2, opts.hardBlank) : validSmush;\n            validSmush = !validSmush && opts.fittingRules.hRule5 ? hRule5_Smush(ch1, ch2, opts.hardBlank) : validSmush;\n            validSmush = !validSmush && opts.fittingRules.hRule6 ? hRule6_Smush(ch1, ch2, opts.hardBlank) : validSmush;\n\n            if (!validSmush) {\n              curDist = curDist - 1;\n              break distCal;\n            }\n          }\n        }\n      }\n\n      if (breakAfter) {\n        break;\n      }\n\n      curDist++;\n    }\n\n    return Math.min(maxDist, curDist);\n  }\n\n  function horizontalSmush(textBlock1, textBlock2, overlap, opts) {\n    var ii,\n        jj,\n        ch,\n        outputFig = [],\n        overlapStart,\n        piece1,\n        piece2,\n        piece3,\n        len1,\n        len2,\n        txt1,\n        txt2;\n\n    for (ii = 0; ii < opts.height; ii++) {\n      txt1 = textBlock1[ii];\n      txt2 = textBlock2[ii];\n      len1 = txt1.length;\n      len2 = txt2.length;\n      overlapStart = len1 - overlap;\n      piece1 = txt1.substr(0, Math.max(0, overlapStart));\n      piece2 = \"\"; // determine overlap piece\n\n      var seg1 = txt1.substr(Math.max(0, len1 - overlap), overlap);\n      var seg2 = txt2.substr(0, Math.min(overlap, len2));\n\n      for (jj = 0; jj < overlap; jj++) {\n        var ch1 = jj < len1 ? seg1.substr(jj, 1) : \" \";\n        var ch2 = jj < len2 ? seg2.substr(jj, 1) : \" \";\n\n        if (ch1 !== \" \" && ch2 !== \" \") {\n          if (opts.fittingRules.hLayout === FITTING) {\n            piece2 += uni_Smush(ch1, ch2, opts.hardBlank);\n          } else if (opts.fittingRules.hLayout === SMUSHING) {\n            piece2 += uni_Smush(ch1, ch2, opts.hardBlank);\n          } else {\n            // Controlled Smushing\n            var nextCh = \"\";\n            nextCh = !nextCh && opts.fittingRules.hRule1 ? hRule1_Smush(ch1, ch2, opts.hardBlank) : nextCh;\n            nextCh = !nextCh && opts.fittingRules.hRule2 ? hRule2_Smush(ch1, ch2, opts.hardBlank) : nextCh;\n            nextCh = !nextCh && opts.fittingRules.hRule3 ? hRule3_Smush(ch1, ch2, opts.hardBlank) : nextCh;\n            nextCh = !nextCh && opts.fittingRules.hRule4 ? hRule4_Smush(ch1, ch2, opts.hardBlank) : nextCh;\n            nextCh = !nextCh && opts.fittingRules.hRule5 ? hRule5_Smush(ch1, ch2, opts.hardBlank) : nextCh;\n            nextCh = !nextCh && opts.fittingRules.hRule6 ? hRule6_Smush(ch1, ch2, opts.hardBlank) : nextCh;\n            nextCh = nextCh || uni_Smush(ch1, ch2, opts.hardBlank);\n            piece2 += nextCh;\n          }\n        } else {\n          piece2 += uni_Smush(ch1, ch2, opts.hardBlank);\n        }\n      }\n\n      if (overlap >= len2) {\n        piece3 = \"\";\n      } else {\n        piece3 = txt2.substr(overlap, Math.max(0, len2 - overlap));\n      }\n\n      outputFig[ii] = piece1 + piece2 + piece3;\n    }\n\n    return outputFig;\n  }\n  /*\n      Creates new empty ASCII placeholder of give len\n      - len - number\n  */\n\n\n  function newFigChar(len) {\n    var outputFigText = [],\n        row;\n\n    for (row = 0; row < len; row++) {\n      outputFigText[row] = \"\";\n    }\n\n    return outputFigText;\n  }\n  /*\n     join words or single characaters into single Fig line\n     - array - array of ASCII words or single characters: {fig: array, overlap: number}\n     - len - height of the Characters (number of rows)\n     - opt - options object\n  */\n\n\n  function joinFigArray(array, len, opts) {\n    return array.reduce(function (acc, data) {\n      return horizontalSmush(acc, data.fig, data.overlap, opts);\n    }, newFigChar(len));\n  }\n  /*\n     break long word return leftover characters and line before the break\n     - figChars - list of single ASCII characters in form {fig, overlap}\n     - len - number of rows\n     - opt - options object\n  */\n\n\n  function breakWord(figChars, len, opts) {\n    var result = {};\n\n    for (var i = figChars.length; --i;) {\n      var w = joinFigArray(figChars.slice(0, i), len, opts);\n\n      if (figLinesWidth(w) <= opts.width) {\n        result.outputFigText = w;\n\n        if (i < figChars.length) {\n          result.chars = figChars.slice(i);\n        } else {\n          result.chars = [];\n        }\n\n        break;\n      }\n    }\n\n    return result;\n  }\n\n  function generateFigTextLines(txt, figChars, opts) {\n    var charIndex,\n        figChar,\n        spaceIndex,\n        overlap = 0,\n        row,\n        outputFigText,\n        len,\n        height = opts.height,\n        outputFigLines = [],\n        maxWidth,\n        prevWidth,\n        nextFigChars,\n        figWords = [],\n        char,\n        isSpace,\n        textFigWord,\n        textFigLine,\n        tmpBreak;\n    outputFigText = newFigChar(height);\n\n    if (opts.width > 0 && opts.whitespaceBreak) {\n      // list of characters is used to break in the middle of the word when word is logner\n      // chars is array of characters with {fig, overlap} and overlap is for whole word\n      nextFigChars = {\n        chars: [],\n        overlap: overlap\n      };\n    }\n\n    if (opts.printDirection === 1) {\n      txt = txt.split('').reverse().join('');\n    }\n\n    len = txt.length;\n\n    for (charIndex = 0; charIndex < len; charIndex++) {\n      char = txt.substr(charIndex, 1);\n      isSpace = char.match(/\\s/);\n      figChar = figChars[char.charCodeAt(0)];\n      textFigLine = null;\n\n      if (figChar) {\n        if (opts.fittingRules.hLayout !== FULL_WIDTH) {\n          overlap = 10000; // a value too high to be the overlap\n\n          for (row = 0; row < opts.height; row++) {\n            overlap = Math.min(overlap, getHorizontalSmushLength(outputFigText[row], figChar[row], opts));\n          }\n\n          overlap = overlap === 10000 ? 0 : overlap;\n        }\n\n        if (opts.width > 0) {\n          if (opts.whitespaceBreak) {\n            // next character in last word (figChars have same data as words)\n            textFigWord = joinFigArray(nextFigChars.chars.concat([{\n              fig: figChar,\n              overlap: overlap\n            }]), height, opts);\n            textFigLine = joinFigArray(figWords.concat([{\n              fig: textFigWord,\n              overlap: nextFigChars.overlap\n            }]), height, opts);\n            maxWidth = figLinesWidth(textFigLine);\n          } else {\n            textFigLine = horizontalSmush(outputFigText, figChar, overlap, opts);\n            maxWidth = figLinesWidth(textFigLine);\n          }\n\n          if (maxWidth >= opts.width && charIndex > 0) {\n            if (opts.whitespaceBreak) {\n              outputFigText = joinFigArray(figWords.slice(0, -1), height, opts);\n\n              if (figWords.length > 1) {\n                outputFigLines.push(outputFigText);\n                outputFigText = newFigChar(height);\n              }\n\n              figWords = [];\n            } else {\n              outputFigLines.push(outputFigText);\n              outputFigText = newFigChar(height);\n            }\n          }\n        }\n\n        if (opts.width > 0 && opts.whitespaceBreak) {\n          if (!isSpace || charIndex === len - 1) {\n            nextFigChars.chars.push({\n              fig: figChar,\n              overlap: overlap\n            });\n          }\n\n          if (isSpace || charIndex === len - 1) {\n            // break long words\n            tmpBreak = null;\n\n            while (true) {\n              textFigLine = joinFigArray(nextFigChars.chars, height, opts);\n              maxWidth = figLinesWidth(textFigLine);\n\n              if (maxWidth >= opts.width) {\n                tmpBreak = breakWord(nextFigChars.chars, height, opts);\n                nextFigChars = {\n                  chars: tmpBreak.chars\n                };\n                outputFigLines.push(tmpBreak.outputFigText);\n              } else {\n                break;\n              }\n            } // any leftovers\n\n\n            if (maxWidth > 0) {\n              if (tmpBreak) {\n                figWords.push({\n                  fig: textFigLine,\n                  overlap: 1\n                });\n              } else {\n                figWords.push({\n                  fig: textFigLine,\n                  overlap: nextFigChars.overlap\n                });\n              }\n            } // save space character and current overlap for smush in joinFigWords\n\n\n            if (isSpace) {\n              figWords.push({\n                fig: figChar,\n                overlap: overlap\n              });\n              outputFigText = newFigChar(height);\n            }\n\n            if (charIndex === len - 1) {\n              // last line\n              outputFigText = joinFigArray(figWords, height, opts);\n            }\n\n            nextFigChars = {\n              chars: [],\n              overlap: overlap\n            };\n            continue;\n          }\n        }\n\n        outputFigText = horizontalSmush(outputFigText, figChar, overlap, opts);\n      }\n    } // special case when last line would be empty\n    // this may happen if text fit exactly opt.width\n\n\n    if (figLinesWidth(outputFigText) > 0) {\n      outputFigLines.push(outputFigText);\n    } // remove hardblanks\n\n\n    if (opts.showHardBlanks !== true) {\n      outputFigLines.forEach(function (outputFigText) {\n        len = outputFigText.length;\n\n        for (row = 0; row < len; row++) {\n          outputFigText[row] = outputFigText[row].replace(new RegExp(\"\\\\\" + opts.hardBlank, \"g\"), \" \");\n        }\n      });\n    }\n\n    return outputFigLines;\n  } // -------------------------------------------------------------------------\n  // Parsing and Generation methods\n\n\n  var getHorizontalFittingRules = function (layout, options) {\n    var props = [\"hLayout\", \"hRule1\", \"hRule2\", \"hRule3\", \"hRule4\", \"hRule5\", \"hRule6\"],\n        params = {},\n        prop,\n        ii;\n\n    if (layout === \"default\") {\n      for (ii = 0; ii < props.length; ii++) {\n        params[props[ii]] = options.fittingRules[props[ii]];\n      }\n    } else if (layout === \"full\") {\n      params = {\n        \"hLayout\": FULL_WIDTH,\n        \"hRule1\": false,\n        \"hRule2\": false,\n        \"hRule3\": false,\n        \"hRule4\": false,\n        \"hRule5\": false,\n        \"hRule6\": false\n      };\n    } else if (layout === \"fitted\") {\n      params = {\n        \"hLayout\": FITTING,\n        \"hRule1\": false,\n        \"hRule2\": false,\n        \"hRule3\": false,\n        \"hRule4\": false,\n        \"hRule5\": false,\n        \"hRule6\": false\n      };\n    } else if (layout === \"controlled smushing\") {\n      params = {\n        \"hLayout\": CONTROLLED_SMUSHING,\n        \"hRule1\": true,\n        \"hRule2\": true,\n        \"hRule3\": true,\n        \"hRule4\": true,\n        \"hRule5\": true,\n        \"hRule6\": true\n      };\n    } else if (layout === \"universal smushing\") {\n      params = {\n        \"hLayout\": SMUSHING,\n        \"hRule1\": false,\n        \"hRule2\": false,\n        \"hRule3\": false,\n        \"hRule4\": false,\n        \"hRule5\": false,\n        \"hRule6\": false\n      };\n    } else {\n      return;\n    }\n\n    return params;\n  };\n\n  var getVerticalFittingRules = function (layout, options) {\n    var props = [\"vLayout\", \"vRule1\", \"vRule2\", \"vRule3\", \"vRule4\", \"vRule5\"],\n        params = {},\n        prop,\n        ii;\n\n    if (layout === \"default\") {\n      for (ii = 0; ii < props.length; ii++) {\n        params[props[ii]] = options.fittingRules[props[ii]];\n      }\n    } else if (layout === \"full\") {\n      params = {\n        \"vLayout\": FULL_WIDTH,\n        \"vRule1\": false,\n        \"vRule2\": false,\n        \"vRule3\": false,\n        \"vRule4\": false,\n        \"vRule5\": false\n      };\n    } else if (layout === \"fitted\") {\n      params = {\n        \"vLayout\": FITTING,\n        \"vRule1\": false,\n        \"vRule2\": false,\n        \"vRule3\": false,\n        \"vRule4\": false,\n        \"vRule5\": false\n      };\n    } else if (layout === \"controlled smushing\") {\n      params = {\n        \"vLayout\": CONTROLLED_SMUSHING,\n        \"vRule1\": true,\n        \"vRule2\": true,\n        \"vRule3\": true,\n        \"vRule4\": true,\n        \"vRule5\": true\n      };\n    } else if (layout === \"universal smushing\") {\n      params = {\n        \"vLayout\": SMUSHING,\n        \"vRule1\": false,\n        \"vRule2\": false,\n        \"vRule3\": false,\n        \"vRule4\": false,\n        \"vRule5\": false\n      };\n    } else {\n      return;\n    }\n\n    return params;\n  };\n  /*\n      Return max line of the ASCII Art\n      - text is array of lines for text\n      - char is next character\n   */\n\n\n  var figLinesWidth = function (textLines) {\n    return Math.max.apply(Math, textLines.map(function (line, i) {\n      return line.length;\n    }));\n  };\n  /*\n      Generates the ASCII Art\n      - fontName: Font to use\n      - option: Options to override the defaults\n      - txt: The text to make into ASCII Art\n  */\n\n\n  var generateText = function (fontName, options, txt) {\n    txt = txt.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n    var lines = txt.split(\"\\n\");\n    var figLines = [];\n    var ii, len, output;\n    len = lines.length;\n\n    for (ii = 0; ii < len; ii++) {\n      figLines = figLines.concat(generateFigTextLines(lines[ii], figFonts[fontName], options));\n    }\n\n    len = figLines.length;\n    output = figLines[0];\n\n    for (ii = 1; ii < len; ii++) {\n      output = smushVerticalFigLines(output, figLines[ii], options);\n    }\n\n    return output ? output.join(\"\\n\") : '';\n  }; // -------------------------------------------------------------------------\n  // Public methods\n\n  /*\n      A short-cut for the figlet.text method\n       Parameters:\n      - txt (string): The text to make into ASCII Art\n      - options (object/string - optional): Options that will override the current font's default options.\n        If a string is provided instead of an object, it is assumed to be the font name.\n           * font\n          * horizontalLayout\n          * verticalLayout\n          * showHardBlanks - Wont remove hardblank characters\n       - next (function): A callback function, it will contained the outputted ASCII Art.\n  */\n\n\n  var me = function (txt, options, next) {\n    me.text(txt, options, next);\n  };\n\n  me.text = function (txt, options, next) {\n    var fontName = ''; // Validate inputs\n\n    txt = txt + '';\n\n    if (typeof arguments[1] === 'function') {\n      next = options;\n      options = {};\n      options.font = figDefaults.font; // default font\n    }\n\n    if (typeof options === 'string') {\n      fontName = options;\n      options = {};\n    } else {\n      options = options || {};\n      fontName = options.font || figDefaults.font;\n    }\n    /*\n        Load the font. If it loads, it's data will be contained in the figFonts object.\n        The callback will recieve a fontsOpts object, which contains the default\n        options of the font (its fitting rules, etc etc).\n    */\n\n\n    me.loadFont(fontName, function (err, fontOpts) {\n      if (err) {\n        return next(err);\n      }\n\n      next(null, generateText(fontName, _reworkFontOpts(fontOpts, options), txt));\n    });\n  };\n  /*\n      Synchronous version of figlet.text.\n      Accepts the same parameters.\n   */\n\n\n  me.textSync = function (txt, options) {\n    var fontName = ''; // Validate inputs\n\n    txt = txt + '';\n\n    if (typeof options === 'string') {\n      fontName = options;\n      options = {};\n    } else {\n      options = options || {};\n      fontName = options.font || figDefaults.font;\n    }\n\n    var fontOpts = _reworkFontOpts(me.loadFontSync(fontName), options);\n\n    return generateText(fontName, fontOpts, txt);\n  };\n  /*\n    takes assigned options and merges them with the default options from the choosen font\n   */\n\n\n  function _reworkFontOpts(fontOpts, options) {\n    var myOpts = JSON.parse(JSON.stringify(fontOpts)),\n        // make a copy because we may edit this (see below)\n    params,\n        prop;\n    /*\n     If the user is chosing to use a specific type of layout (e.g., 'full', 'fitted', etc etc)\n     Then we need to override the default font options.\n     */\n\n    if (typeof options.horizontalLayout !== 'undefined') {\n      params = getHorizontalFittingRules(options.horizontalLayout, fontOpts);\n\n      for (prop in params) {\n        if (params.hasOwnProperty(prop)) {\n          myOpts.fittingRules[prop] = params[prop];\n        }\n      }\n    }\n\n    if (typeof options.verticalLayout !== 'undefined') {\n      params = getVerticalFittingRules(options.verticalLayout, fontOpts);\n\n      for (prop in params) {\n        if (params.hasOwnProperty(prop)) {\n          myOpts.fittingRules[prop] = params[prop];\n        }\n      }\n    }\n\n    myOpts.printDirection = typeof options.printDirection !== 'undefined' ? options.printDirection : fontOpts.printDirection;\n    myOpts.showHardBlanks = options.showHardBlanks || false;\n    myOpts.width = options.width || -1;\n    myOpts.whitespaceBreak = options.whitespaceBreak || false;\n    return myOpts;\n  }\n  /*\n      Returns metadata about a specfic FIGlet font.\n       Returns:\n          next(err, options, headerComment)\n          - err: The error if an error occurred, otherwise null/falsey.\n          - options (object): The options defined for the font.\n          - headerComment (string): The font's header comment.\n  */\n\n\n  me.metadata = function (fontName, next) {\n    fontName = fontName + '';\n    /*\n        Load the font. If it loads, it's data will be contained in the figFonts object.\n        The callback will recieve a fontsOpts object, which contains the default\n        options of the font (its fitting rules, etc etc).\n    */\n\n    me.loadFont(fontName, function (err, fontOpts) {\n      if (err) {\n        next(err);\n        return;\n      }\n\n      next(null, fontOpts, figFonts[fontName].comment);\n    });\n  };\n  /*\n      Allows you to override defaults. See the definition of the figDefaults object up above\n      to see what properties can be overridden.\n      Returns the options for the font.\n  */\n\n\n  me.defaults = function (opts) {\n    if (typeof opts === 'object' && opts !== null) {\n      for (var prop in opts) {\n        if (opts.hasOwnProperty(prop)) {\n          figDefaults[prop] = opts[prop];\n        }\n      }\n    }\n\n    return JSON.parse(JSON.stringify(figDefaults));\n  };\n  /*\n      Parses data from a FIGlet font file and places it into the figFonts object.\n  */\n\n\n  me.parseFont = function (fontName, data) {\n    data = data.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n    figFonts[fontName] = {};\n    var lines = data.split(\"\\n\");\n    var headerData = lines.splice(0, 1)[0].split(\" \");\n    var figFont = figFonts[fontName];\n    var opts = {};\n    opts.hardBlank = headerData[0].substr(5, 1);\n    opts.height = parseInt(headerData[1], 10);\n    opts.baseline = parseInt(headerData[2], 10);\n    opts.maxLength = parseInt(headerData[3], 10);\n    opts.oldLayout = parseInt(headerData[4], 10);\n    opts.numCommentLines = parseInt(headerData[5], 10);\n    opts.printDirection = headerData.length >= 6 ? parseInt(headerData[6], 10) : 0;\n    opts.fullLayout = headerData.length >= 7 ? parseInt(headerData[7], 10) : null;\n    opts.codeTagCount = headerData.length >= 8 ? parseInt(headerData[8], 10) : null;\n    opts.fittingRules = getSmushingRules(opts.oldLayout, opts.fullLayout);\n    figFont.options = opts; // error check\n\n    if (opts.hardBlank.length !== 1 || isNaN(opts.height) || isNaN(opts.baseline) || isNaN(opts.maxLength) || isNaN(opts.oldLayout) || isNaN(opts.numCommentLines)) {\n      throw new Error('FIGlet header contains invalid values.');\n    }\n    /*\n        All FIGlet fonts must contain chars 32-126, 196, 214, 220, 228, 246, 252, 223\n    */\n\n\n    var charNums = [],\n        ii;\n\n    for (ii = 32; ii <= 126; ii++) {\n      charNums.push(ii);\n    }\n\n    charNums = charNums.concat(196, 214, 220, 228, 246, 252, 223); // error check - validate that there are enough lines in the file\n\n    if (lines.length < opts.numCommentLines + opts.height * charNums.length) {\n      throw new Error('FIGlet file is missing data.');\n    }\n    /*\n        Parse out the context of the file and put it into our figFont object\n    */\n\n\n    var cNum,\n        endCharRegEx,\n        parseError = false;\n    figFont.comment = lines.splice(0, opts.numCommentLines).join(\"\\n\");\n    figFont.numChars = 0;\n\n    while (lines.length > 0 && figFont.numChars < charNums.length) {\n      cNum = charNums[figFont.numChars];\n      figFont[cNum] = lines.splice(0, opts.height); // remove end sub-chars\n\n      for (ii = 0; ii < opts.height; ii++) {\n        if (typeof figFont[cNum][ii] === \"undefined\") {\n          figFont[cNum][ii] = \"\";\n        } else {\n          endCharRegEx = new RegExp(\"\\\\\" + figFont[cNum][ii].substr(figFont[cNum][ii].length - 1, 1) + \"+$\");\n          figFont[cNum][ii] = figFont[cNum][ii].replace(endCharRegEx, \"\");\n        }\n      }\n\n      figFont.numChars++;\n    }\n    /*\n        Now we check to see if any additional characters are present\n    */\n\n\n    while (lines.length > 0) {\n      cNum = lines.splice(0, 1)[0].split(\" \")[0];\n\n      if (/^0[xX][0-9a-fA-F]+$/.test(cNum)) {\n        cNum = parseInt(cNum, 16);\n      } else if (/^0[0-7]+$/.test(cNum)) {\n        cNum = parseInt(cNum, 8);\n      } else if (/^[0-9]+$/.test(cNum)) {\n        cNum = parseInt(cNum, 10);\n      } else if (/^-0[xX][0-9a-fA-F]+$/.test(cNum)) {\n        cNum = parseInt(cNum, 16);\n      } else {\n        if (cNum === \"\") {\n          break;\n        } // something's wrong\n\n\n        console.log(\"Invalid data:\" + cNum);\n        parseError = true;\n        break;\n      }\n\n      figFont[cNum] = lines.splice(0, opts.height); // remove end sub-chars\n\n      for (ii = 0; ii < opts.height; ii++) {\n        if (typeof figFont[cNum][ii] === \"undefined\") {\n          figFont[cNum][ii] = \"\";\n        } else {\n          endCharRegEx = new RegExp(\"\\\\\" + figFont[cNum][ii].substr(figFont[cNum][ii].length - 1, 1) + \"+$\");\n          figFont[cNum][ii] = figFont[cNum][ii].replace(endCharRegEx, \"\");\n        }\n      }\n\n      figFont.numChars++;\n    } // error check\n\n\n    if (parseError === true) {\n      throw new Error('Error parsing data.');\n    }\n\n    return opts;\n  };\n  /*\n      Loads a font.\n  */\n\n\n  me.loadFont = function (fontName, next) {\n    if (figFonts[fontName]) {\n      next(null, figFonts[fontName].options);\n      return;\n    }\n\n    if (typeof fetch !== 'function') {\n      console.error('figlet.js requires the fetch API or a fetch polyfill such as https://cdnjs.com/libraries/fetch');\n      throw new Error('fetch is required for figlet.js to work.');\n    }\n\n    fetch(figDefaults.fontPath + '/' + fontName + '.flf').then(function (response) {\n      if (response.ok) {\n        return response.text();\n      }\n\n      console.log('Unexpected response', response);\n      throw new Error('Network response was not ok.');\n    }).then(function (text) {\n      next(null, me.parseFont(fontName, text));\n    }).catch(next);\n  };\n  /*\n      loads a font synchronously, not implemented for the browser\n   */\n\n\n  me.loadFontSync = function (name) {\n    if (figFonts[name]) {\n      return figFonts[name].options;\n    }\n\n    throw new Error('synchronous font loading is not implemented for the browser');\n  };\n  /*\n      preloads a list of fonts prior to using textSync\n      - fonts: an array of font names (i.e. [\"Standard\",\"Soft\"])\n      - next: callback function\n   */\n\n\n  me.preloadFonts = function (fonts, next) {\n    var fontData = [];\n    fonts.reduce(function (promise, name) {\n      return promise.then(function () {\n        return fetch(figDefaults.fontPath + '/' + name + '.flf').then(response => {\n          return response.text();\n        }).then(function (data) {\n          fontData.push(data);\n        });\n      });\n    }, Promise.resolve()).then(function (res) {\n      for (var i in fonts) {\n        if (fonts.hasOwnProperty(i)) {\n          me.parseFont(fonts[i], fontData[i]);\n        }\n      }\n\n      if (next) next();\n    });\n  };\n\n  me.figFonts = figFonts;\n  return me;\n}(); // for node.js\n\n\nif (typeof module !== 'undefined') {\n  if (typeof module.exports !== 'undefined') {\n    module.exports = figlet;\n  }\n}","map":{"version":3,"sources":["L:/3rdyearproject/peacock/console-application/node_modules/figlet/lib/figlet.js"],"names":["figlet","FULL_WIDTH","FITTING","SMUSHING","CONTROLLED_SMUSHING","figFonts","figDefaults","font","fontPath","getSmushingRules","oldLayout","newLayout","rules","val","index","len","code","codes","length","hRule1_Smush","ch1","ch2","hardBlank","hRule2_Smush","rule2Str","indexOf","hRule3_Smush","rule3Classes","r3_pos1","r3_pos2","Math","abs","substr","max","hRule4_Smush","rule4Str","r4_pos1","r4_pos2","hRule5_Smush","rule5Str","rule5Hash","r5_pos1","r5_pos2","hRule6_Smush","vRule1_Smush","vRule2_Smush","vRule3_Smush","vRule4_Smush","vRule5_Smush","uni_Smush","canVerticalSmush","txt1","txt2","opts","fittingRules","vLayout","ii","min","endSmush","validSmush","vRule1","vRule2","vRule3","vRule4","getVerticalSmushDist","lines1","lines2","maxDist","len1","len2","subLines1","subLines2","slen","curDist","ret","result","slice","verticallySmushLines","line1","line2","vRule5","verticalSmush","overlap","piece1","piece2_1","piece2_2","line","piece2","piece3","push","concat","padLines","lines","numSpaces","padding","smushVerticalFigLines","output","getHorizontalSmushLength","hLayout","breakAfter","seg1","seg2","distCal","hRule1","hRule2","hRule3","hRule4","hRule5","hRule6","horizontalSmush","textBlock1","textBlock2","jj","ch","outputFig","overlapStart","height","nextCh","newFigChar","outputFigText","row","joinFigArray","array","reduce","acc","data","fig","breakWord","figChars","i","w","figLinesWidth","width","chars","generateFigTextLines","txt","charIndex","figChar","spaceIndex","outputFigLines","maxWidth","prevWidth","nextFigChars","figWords","char","isSpace","textFigWord","textFigLine","tmpBreak","whitespaceBreak","printDirection","split","reverse","join","match","charCodeAt","showHardBlanks","forEach","replace","RegExp","getHorizontalFittingRules","layout","options","props","params","prop","getVerticalFittingRules","textLines","apply","map","generateText","fontName","figLines","me","next","text","arguments","loadFont","err","fontOpts","_reworkFontOpts","textSync","loadFontSync","myOpts","JSON","parse","stringify","horizontalLayout","hasOwnProperty","verticalLayout","metadata","comment","defaults","parseFont","headerData","splice","figFont","parseInt","baseline","maxLength","numCommentLines","fullLayout","codeTagCount","isNaN","Error","charNums","cNum","endCharRegEx","parseError","numChars","test","console","log","fetch","error","then","response","ok","catch","name","preloadFonts","fonts","fontData","promise","Promise","resolve","res","module","exports"],"mappings":"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","sourcesContent":["/*\n    FIGlet.js (a FIGDriver for FIGlet fonts)\n    By Patrick Gillespie (patorjk@gmail.com)\n    Originally Written For: http://patorjk.com/software/taag/\n    License: MIT (with this header staying intact)\n\n    This JavaScript code aims to fully implement the FIGlet spec.\n    Full FIGlet spec: http://patorjk.com/software/taag/docs/figfont.txt\n\n    FIGlet fonts are actually kind of complex, which is why you will see\n    a lot of code about parsing and interpreting rules. The actual generation\n    code is pretty simple and is done near the bottom of the code.\n*/\n\n\"use strict\";\n\nvar figlet = figlet || (function() {\n\n    // ---------------------------------------------------------------------\n    // Private static variables\n\n    var FULL_WIDTH = 0,\n        FITTING = 1,\n        SMUSHING = 2,\n        CONTROLLED_SMUSHING = 3;\n\n    // ---------------------------------------------------------------------\n    // Variable that will hold information about the fonts\n\n    var figFonts = {}; // What stores all of the FIGlet font data\n    var figDefaults = {\n        font: 'Standard',\n        fontPath: './fonts'\n    };\n\n    // ---------------------------------------------------------------------\n    // Private static methods\n\n    /*\n        This method takes in the oldLayout and newLayout data from the FIGfont header file and returns\n        the layout information.\n    */\n    function getSmushingRules(oldLayout, newLayout) {\n        var rules = {};\n        var val, index, len, code;\n        var codes = [[16384,\"vLayout\",SMUSHING], [8192,\"vLayout\",FITTING], [4096, \"vRule5\", true], [2048, \"vRule4\", true],\n                     [1024, \"vRule3\", true], [512, \"vRule2\", true], [256, \"vRule1\", true], [128, \"hLayout\", SMUSHING],\n                     [64, \"hLayout\", FITTING], [32, \"hRule6\", true], [16, \"hRule5\", true], [8, \"hRule4\", true], [4, \"hRule3\", true],\n                     [2, \"hRule2\", true], [1, \"hRule1\", true]];\n\n        val = (newLayout !== null) ? newLayout : oldLayout;\n        index = 0;\n        len = codes.length;\n        while ( index < len ) {\n            code = codes[index];\n            if (val >= code[0]) {\n                val = val - code[0];\n                rules[code[1]] = (typeof rules[code[1]] === \"undefined\") ? code[2] : rules[code[1]];\n            } else if (code[1] !== \"vLayout\" && code[1] !== \"hLayout\") {\n                rules[code[1]] = false;\n            }\n            index++;\n        }\n\n        if (typeof rules[\"hLayout\"] === \"undefined\") {\n            if (oldLayout === 0) {\n                rules[\"hLayout\"] = FITTING;\n            } else if (oldLayout === -1) {\n                rules[\"hLayout\"] = FULL_WIDTH;\n            } else {\n                if (rules[\"hRule1\"] || rules[\"hRule2\"] || rules[\"hRule3\"] || rules[\"hRule4\"] ||rules[\"hRule5\"] || rules[\"hRule6\"] ) {\n                    rules[\"hLayout\"] = CONTROLLED_SMUSHING;\n                } else {\n                    rules[\"hLayout\"] = SMUSHING;\n                }\n            }\n        } else if (rules[\"hLayout\"] === SMUSHING) {\n            if (rules[\"hRule1\"] || rules[\"hRule2\"] || rules[\"hRule3\"] || rules[\"hRule4\"] ||rules[\"hRule5\"] || rules[\"hRule6\"] ) {\n                rules[\"hLayout\"] = CONTROLLED_SMUSHING;\n            }\n        }\n\n        if (typeof rules[\"vLayout\"] === \"undefined\") {\n            if (rules[\"vRule1\"] || rules[\"vRule2\"] || rules[\"vRule3\"] || rules[\"vRule4\"] ||rules[\"vRule5\"]  ) {\n                rules[\"vLayout\"] = CONTROLLED_SMUSHING;\n            } else {\n                rules[\"vLayout\"] = FULL_WIDTH;\n            }\n        } else if (rules[\"vLayout\"] === SMUSHING) {\n            if (rules[\"vRule1\"] || rules[\"vRule2\"] || rules[\"vRule3\"] || rules[\"vRule4\"] ||rules[\"vRule5\"]  ) {\n                rules[\"vLayout\"] = CONTROLLED_SMUSHING;\n            }\n        }\n\n        return rules;\n    }\n\n    /* The [vh]Rule[1-6]_Smush functions return the smushed character OR false if the two characters can't be smushed */\n\n    /*\n        Rule 1: EQUAL CHARACTER SMUSHING (code value 1)\n\n            Two sub-characters are smushed into a single sub-character\n            if they are the same.  This rule does not smush\n            hardblanks.  (See rule 6 on hardblanks below)\n    */\n    function hRule1_Smush(ch1, ch2, hardBlank) {\n        if (ch1 === ch2 && ch1 !== hardBlank) {return ch1;}\n        return false;\n    }\n\n    /*\n        Rule 2: UNDERSCORE SMUSHING (code value 2)\n\n            An underscore (\"_\") will be replaced by any of: \"|\", \"/\",\n            \"\\\", \"[\", \"]\", \"{\", \"}\", \"(\", \")\", \"<\" or \">\".\n    */\n    function hRule2_Smush(ch1, ch2) {\n        var rule2Str = \"|/\\\\[]{}()<>\";\n        if (ch1 === \"_\") {\n            if (rule2Str.indexOf(ch2) !== -1) {return ch2;}\n        } else if (ch2 === \"_\") {\n            if (rule2Str.indexOf(ch1) !== -1) {return ch1;}\n        }\n        return false;\n    }\n\n    /*\n        Rule 3: HIERARCHY SMUSHING (code value 4)\n\n            A hierarchy of six classes is used: \"|\", \"/\\\", \"[]\", \"{}\",\n            \"()\", and \"<>\".  When two smushing sub-characters are\n            from different classes, the one from the latter class\n            will be used.\n    */\n    function hRule3_Smush(ch1, ch2) {\n        var rule3Classes = \"| /\\\\ [] {} () <>\";\n        var r3_pos1 = rule3Classes.indexOf(ch1);\n        var r3_pos2 = rule3Classes.indexOf(ch2);\n        if (r3_pos1 !== -1 && r3_pos2 !== -1) {\n            if (r3_pos1 !== r3_pos2 && Math.abs(r3_pos1-r3_pos2) !== 1) {\n                return rule3Classes.substr(Math.max(r3_pos1,r3_pos2), 1);\n            }\n        }\n        return false;\n    }\n\n    /*\n        Rule 4: OPPOSITE PAIR SMUSHING (code value 8)\n\n            Smushes opposing brackets (\"[]\" or \"][\"), braces (\"{}\" or\n            \"}{\") and parentheses (\"()\" or \")(\") together, replacing\n            any such pair with a vertical bar (\"|\").\n    */\n    function hRule4_Smush(ch1, ch2) {\n        var rule4Str = \"[] {} ()\";\n        var r4_pos1 = rule4Str.indexOf(ch1);\n        var r4_pos2 = rule4Str.indexOf(ch2);\n        if (r4_pos1 !== -1 && r4_pos2 !== -1) {\n            if (Math.abs(r4_pos1-r4_pos2) <= 1) {\n                return \"|\";\n            }\n        }\n        return false;\n    }\n\n    /*\n        Rule 5: BIG X SMUSHING (code value 16)\n\n            Smushes \"/\\\" into \"|\", \"\\/\" into \"Y\", and \"><\" into \"X\".\n            Note that \"<>\" is not smushed in any way by this rule.\n            The name \"BIG X\" is historical; originally all three pairs\n            were smushed into \"X\".\n    */\n    function hRule5_Smush(ch1, ch2) {\n        var rule5Str = \"/\\\\ \\\\/ ><\";\n        var rule5Hash = {\"0\": \"|\", \"3\": \"Y\", \"6\": \"X\"};\n        var r5_pos1 = rule5Str.indexOf(ch1);\n        var r5_pos2 = rule5Str.indexOf(ch2);\n        if (r5_pos1 !== -1 && r5_pos2 !== -1) {\n            if ((r5_pos2-r5_pos1) === 1) {\n                return rule5Hash[r5_pos1];\n            }\n        }\n        return false;\n    }\n\n    /*\n        Rule 6: HARDBLANK SMUSHING (code value 32)\n\n            Smushes two hardblanks together, replacing them with a\n            single hardblank.  (See \"Hardblanks\" below.)\n    */\n    function hRule6_Smush(ch1, ch2, hardBlank) {\n        if (ch1 === hardBlank && ch2 === hardBlank) {\n            return hardBlank;\n        }\n        return false;\n    }\n\n    /*\n        Rule 1: EQUAL CHARACTER SMUSHING (code value 256)\n\n            Same as horizontal smushing rule 1.\n    */\n    function vRule1_Smush(ch1, ch2) {\n        if (ch1 === ch2) {return ch1;}\n        return false;\n    }\n\n    /*\n        Rule 2: UNDERSCORE SMUSHING (code value 512)\n\n            Same as horizontal smushing rule 2.\n    */\n    function vRule2_Smush(ch1, ch2) {\n        var rule2Str = \"|/\\\\[]{}()<>\";\n        if (ch1 === \"_\") {\n            if (rule2Str.indexOf(ch2) !== -1) {return ch2;}\n        } else if (ch2 === \"_\") {\n            if (rule2Str.indexOf(ch1) !== -1) {return ch1;}\n        }\n        return false;\n    }\n\n    /*\n        Rule 3: HIERARCHY SMUSHING (code value 1024)\n\n            Same as horizontal smushing rule 3.\n    */\n    function vRule3_Smush(ch1, ch2) {\n        var rule3Classes = \"| /\\\\ [] {} () <>\";\n        var r3_pos1 = rule3Classes.indexOf(ch1);\n        var r3_pos2 = rule3Classes.indexOf(ch2);\n        if (r3_pos1 !== -1 && r3_pos2 !== -1) {\n            if (r3_pos1 !== r3_pos2 && Math.abs(r3_pos1-r3_pos2) !== 1) {\n                return rule3Classes.substr(Math.max(r3_pos1,r3_pos2), 1);\n            }\n        }\n        return false;\n    }\n\n    /*\n        Rule 4: HORIZONTAL LINE SMUSHING (code value 2048)\n\n            Smushes stacked pairs of \"-\" and \"_\", replacing them with\n            a single \"=\" sub-character.  It does not matter which is\n            found above the other.  Note that vertical smushing rule 1\n            will smush IDENTICAL pairs of horizontal lines, while this\n            rule smushes horizontal lines consisting of DIFFERENT\n            sub-characters.\n    */\n    function vRule4_Smush(ch1, ch2) {\n        if ( (ch1 === \"-\" && ch2 === \"_\") || (ch1 === \"_\" && ch2 === \"-\") ) {\n            return \"=\";\n        }\n        return false;\n    }\n\n    /*\n        Rule 5: VERTICAL LINE SUPERSMUSHING (code value 4096)\n\n            This one rule is different from all others, in that it\n            \"supersmushes\" vertical lines consisting of several\n            vertical bars (\"|\").  This creates the illusion that\n            FIGcharacters have slid vertically against each other.\n            Supersmushing continues until any sub-characters other\n            than \"|\" would have to be smushed.  Supersmushing can\n            produce impressive results, but it is seldom possible,\n            since other sub-characters would usually have to be\n            considered for smushing as soon as any such stacked\n            vertical lines are encountered.\n    */\n    function vRule5_Smush(ch1, ch2) {\n        if ( ch1 === \"|\" && ch2 === \"|\" ) {\n            return \"|\";\n        }\n        return false;\n    }\n\n    /*\n        Universal smushing simply overrides the sub-character from the\n        earlier FIGcharacter with the sub-character from the later\n        FIGcharacter.  This produces an \"overlapping\" effect with some\n        FIGfonts, wherin the latter FIGcharacter may appear to be \"in\n        front\".\n    */\n    function uni_Smush(ch1, ch2, hardBlank) {\n        if (ch2 === \" \" || ch2 === \"\") {\n            return ch1;\n        } else if (ch2 === hardBlank && ch1 !== \" \") {\n            return ch1;\n        } else {\n            return ch2;\n        }\n    }\n\n    // --------------------------------------------------------------------------\n    // main vertical smush routines (excluding rules)\n\n    /*\n        txt1 - A line of text\n        txt2 - A line of text\n        opts - FIGlet options array\n\n        About: Takes in two lines of text and returns one of the following:\n        \"valid\" - These lines can be smushed together given the current smushing rules\n        \"end\" - The lines can be smushed, but we're at a stopping point\n        \"invalid\" - The two lines cannot be smushed together\n    */\n    function canVerticalSmush(txt1, txt2, opts) {\n        if (opts.fittingRules.vLayout === FULL_WIDTH) {return \"invalid\";}\n        var ii, len = Math.min(txt1.length, txt2.length);\n        var ch1, ch2, endSmush = false, validSmush;\n        if (len===0) {return \"invalid\";}\n\n        for (ii = 0; ii < len; ii++) {\n            ch1 = txt1.substr(ii,1);\n            ch2 = txt2.substr(ii,1);\n            if (ch1 !== \" \" && ch2 !== \" \") {\n                if (opts.fittingRules.vLayout === FITTING) {\n                    return \"invalid\";\n                } else if (opts.fittingRules.vLayout === SMUSHING) {\n                    return \"end\";\n                } else {\n                    if (vRule5_Smush(ch1,ch2)) {endSmush = endSmush || false; continue;} // rule 5 allow for \"super\" smushing, but only if we're not already ending this smush\n                    validSmush = false;\n                    validSmush = (opts.fittingRules.vRule1) ? vRule1_Smush(ch1,ch2) : validSmush;\n                    validSmush = (!validSmush && opts.fittingRules.vRule2) ? vRule2_Smush(ch1,ch2) : validSmush;\n                    validSmush = (!validSmush && opts.fittingRules.vRule3) ? vRule3_Smush(ch1,ch2) : validSmush;\n                    validSmush = (!validSmush && opts.fittingRules.vRule4) ? vRule4_Smush(ch1,ch2) : validSmush;\n                    endSmush = true;\n                    if (!validSmush) {return \"invalid\";}\n                }\n            }\n        }\n        if (endSmush) {\n            return \"end\";\n        } else {\n            return \"valid\";\n        }\n    }\n\n    function getVerticalSmushDist(lines1, lines2, opts) {\n        var maxDist = lines1.length;\n        var len1 = lines1.length;\n        var len2 = lines2.length;\n        var subLines1, subLines2, slen;\n        var curDist = 1;\n        var ii, ret, result;\n        while (curDist <= maxDist) {\n\n            subLines1 = lines1.slice(Math.max(0,len1-curDist), len1);\n            subLines2 = lines2.slice(0, Math.min(maxDist, curDist));\n\n            slen = subLines2.length;//TODO:check this\n            result = \"\";\n            for (ii = 0; ii < slen; ii++) {\n                ret = canVerticalSmush(subLines1[ii], subLines2[ii], opts);\n                if (ret === \"end\") {\n                    result = ret;\n                } else if (ret === \"invalid\") {\n                    result = ret;\n                    break;\n                } else {\n                    if (result === \"\") {\n                        result = \"valid\";\n                    }\n                }\n            }\n\n            if (result === \"invalid\") {curDist--;break;}\n            if (result === \"end\") {break;}\n            if (result === \"valid\") {curDist++;}\n        }\n\n        return Math.min(maxDist,curDist);\n    }\n\n    function verticallySmushLines(line1, line2, opts) {\n        var ii, len = Math.min(line1.length, line2.length);\n        var ch1, ch2, result = \"\", validSmush;\n\n        for (ii = 0; ii < len; ii++) {\n            ch1 = line1.substr(ii,1);\n            ch2 = line2.substr(ii,1);\n            if (ch1 !== \" \" && ch2 !== \" \") {\n                if (opts.fittingRules.vLayout === FITTING) {\n                    result += uni_Smush(ch1,ch2);\n                } else if (opts.fittingRules.vLayout === SMUSHING) {\n                    result += uni_Smush(ch1,ch2);\n                } else {\n                    validSmush = false;\n                    validSmush = (opts.fittingRules.vRule5) ? vRule5_Smush(ch1,ch2) : validSmush;\n                    validSmush = (!validSmush && opts.fittingRules.vRule1) ? vRule1_Smush(ch1,ch2) : validSmush;\n                    validSmush = (!validSmush && opts.fittingRules.vRule2) ? vRule2_Smush(ch1,ch2) : validSmush;\n                    validSmush = (!validSmush && opts.fittingRules.vRule3) ? vRule3_Smush(ch1,ch2) : validSmush;\n                    validSmush = (!validSmush && opts.fittingRules.vRule4) ? vRule4_Smush(ch1,ch2) : validSmush;\n                    result += validSmush;\n                }\n            } else {\n                result += uni_Smush(ch1,ch2);\n            }\n        }\n        return result;\n    }\n\n    function verticalSmush(lines1, lines2, overlap, opts) {\n        var len1 = lines1.length;\n        var len2 = lines2.length;\n        var piece1 = lines1.slice(0, Math.max(0,len1-overlap));\n        var piece2_1 = lines1.slice(Math.max(0,len1-overlap), len1);\n        var piece2_2 = lines2.slice(0, Math.min(overlap, len2));\n        var ii, len, line, piece2 = [], piece3, result = [];\n\n        len = piece2_1.length;\n        for (ii = 0; ii < len; ii++) {\n            if (ii >= len2) {\n                line = piece2_1[ii];\n            } else {\n                line = verticallySmushLines(piece2_1[ii], piece2_2[ii], opts);\n            }\n            piece2.push(line);\n        }\n\n        piece3 = lines2.slice(Math.min(overlap,len2), len2);\n\n        return result.concat(piece1,piece2,piece3);\n    }\n\n    function padLines(lines, numSpaces) {\n        var ii, len = lines.length, padding = \"\";\n        for (ii = 0; ii < numSpaces; ii++) {\n            padding += \" \";\n        }\n        for (ii = 0; ii < len; ii++) {\n            lines[ii] += padding;\n        }\n    }\n\n    function smushVerticalFigLines(output, lines, opts) {\n        var len1 = output[0].length;\n        var len2 = lines[0].length;\n        var overlap;\n        if (len1 > len2) {\n            padLines(lines, len1-len2);\n        } else if (len2 > len1) {\n            padLines(output, len2-len1);\n        }\n        overlap = getVerticalSmushDist(output, lines, opts);\n        return verticalSmush(output, lines, overlap,opts);\n    }\n\n    // -------------------------------------------------------------------------\n    // Main horizontal smush routines (excluding rules)\n\n    function getHorizontalSmushLength(txt1, txt2, opts) {\n        if (opts.fittingRules.hLayout === FULL_WIDTH) {return 0;}\n        var ii, len1 = txt1.length, len2 = txt2.length;\n        var maxDist = len1;\n        var curDist = 1;\n        var breakAfter = false;\n        var validSmush = false;\n        var seg1, seg2, ch1, ch2;\n        if (len1 === 0) {return 0;}\n\n        distCal: while (curDist <= maxDist) {\n            seg1 = txt1.substr(len1-curDist,curDist);\n            seg2 = txt2.substr(0,Math.min(curDist,len2));\n            for (ii = 0; ii < Math.min(curDist,len2); ii++) {\n                ch1 = seg1.substr(ii,1);\n                ch2 = seg2.substr(ii,1);\n                if (ch1 !== \" \" && ch2 !== \" \" ) {\n                    if (opts.fittingRules.hLayout === FITTING) {\n                        curDist = curDist - 1;\n                        break distCal;\n                    } else if (opts.fittingRules.hLayout === SMUSHING) {\n                        if (ch1 === opts.hardBlank || ch2 === opts.hardBlank) {\n                            curDist = curDist - 1; // universal smushing does not smush hardblanks\n                        }\n                        break distCal;\n                    } else {\n                        breakAfter = true; // we know we need to break, but we need to check if our smushing rules will allow us to smush the overlapped characters\n                        validSmush = false; // the below checks will let us know if we can smush these characters\n\n                        validSmush = (opts.fittingRules.hRule1) ? hRule1_Smush(ch1,ch2,opts.hardBlank) : validSmush;\n                        validSmush = (!validSmush && opts.fittingRules.hRule2) ? hRule2_Smush(ch1,ch2,opts.hardBlank) : validSmush;\n                        validSmush = (!validSmush && opts.fittingRules.hRule3) ? hRule3_Smush(ch1,ch2,opts.hardBlank) : validSmush;\n                        validSmush = (!validSmush && opts.fittingRules.hRule4) ? hRule4_Smush(ch1,ch2,opts.hardBlank) : validSmush;\n                        validSmush = (!validSmush && opts.fittingRules.hRule5) ? hRule5_Smush(ch1,ch2,opts.hardBlank) : validSmush;\n                        validSmush = (!validSmush && opts.fittingRules.hRule6) ? hRule6_Smush(ch1,ch2,opts.hardBlank) : validSmush;\n\n                        if (!validSmush) {\n                            curDist = curDist - 1;\n                            break distCal;\n                        }\n                    }\n                }\n            }\n            if (breakAfter) {break;}\n            curDist++;\n        }\n        return Math.min(maxDist,curDist);\n    }\n\n    function horizontalSmush(textBlock1, textBlock2, overlap, opts) {\n        var ii, jj, ch, outputFig = [],\n            overlapStart,piece1,piece2,piece3,len1,len2,txt1,txt2;\n\n        for (ii = 0; ii < opts.height; ii++) {\n            txt1 = textBlock1[ii];\n            txt2 = textBlock2[ii];\n            len1 = txt1.length;\n            len2 = txt2.length;\n            overlapStart = len1-overlap;\n            piece1 = txt1.substr(0,Math.max(0,overlapStart));\n            piece2 = \"\";\n\n            // determine overlap piece\n            var seg1 = txt1.substr(Math.max(0,len1-overlap),overlap);\n            var seg2 = txt2.substr(0,Math.min(overlap,len2));\n\n            for (jj = 0; jj < overlap; jj++) {\n                var ch1 = (jj < len1) ? seg1.substr(jj,1) : \" \";\n                var ch2 = (jj < len2) ? seg2.substr(jj,1) : \" \";\n\n                if (ch1 !== \" \" && ch2 !== \" \") {\n                    if (opts.fittingRules.hLayout === FITTING) {\n                        piece2 += uni_Smush(ch1, ch2, opts.hardBlank);\n                    } else if (opts.fittingRules.hLayout === SMUSHING) {\n                        piece2 += uni_Smush(ch1, ch2, opts.hardBlank);\n                    } else {\n                        // Controlled Smushing\n                        var nextCh = \"\";\n                        nextCh = (!nextCh && opts.fittingRules.hRule1) ? hRule1_Smush(ch1,ch2,opts.hardBlank) : nextCh;\n                        nextCh = (!nextCh && opts.fittingRules.hRule2) ? hRule2_Smush(ch1,ch2,opts.hardBlank) : nextCh;\n                        nextCh = (!nextCh && opts.fittingRules.hRule3) ? hRule3_Smush(ch1,ch2,opts.hardBlank) : nextCh;\n                        nextCh = (!nextCh && opts.fittingRules.hRule4) ? hRule4_Smush(ch1,ch2,opts.hardBlank) : nextCh;\n                        nextCh = (!nextCh && opts.fittingRules.hRule5) ? hRule5_Smush(ch1,ch2,opts.hardBlank) : nextCh;\n                        nextCh = (!nextCh && opts.fittingRules.hRule6) ? hRule6_Smush(ch1,ch2,opts.hardBlank) : nextCh;\n                        nextCh = nextCh || uni_Smush(ch1, ch2, opts.hardBlank);\n                        piece2 += nextCh;\n                    }\n                } else {\n                    piece2 += uni_Smush(ch1, ch2, opts.hardBlank);\n                }\n            }\n\n            if (overlap >= len2) {\n                piece3 = \"\";\n            } else {\n                piece3 = txt2.substr(overlap,Math.max(0,len2-overlap));\n            }\n            outputFig[ii] = piece1 + piece2 + piece3;\n        }\n        return outputFig;\n    }\n\n    /*\n        Creates new empty ASCII placeholder of give len\n        - len - number\n    */\n    function newFigChar(len) {\n        var outputFigText = [], row;\n        for (row = 0; row < len; row++) {\n            outputFigText[row] = \"\";\n        }\n        return outputFigText;\n    }\n\n    /*\n       join words or single characaters into single Fig line\n       - array - array of ASCII words or single characters: {fig: array, overlap: number}\n       - len - height of the Characters (number of rows)\n       - opt - options object\n    */\n    function joinFigArray(array, len, opts) {\n        return array.reduce(function(acc, data) {\n            return horizontalSmush(acc, data.fig, data.overlap, opts);\n        }, newFigChar(len));\n    }\n\n    /*\n       break long word return leftover characters and line before the break\n       - figChars - list of single ASCII characters in form {fig, overlap}\n       - len - number of rows\n       - opt - options object\n    */\n    function breakWord(figChars, len, opts) {\n        var result = {};\n        for (var i = figChars.length; --i;) {\n            var w = joinFigArray(figChars.slice(0, i), len, opts);\n            if (figLinesWidth(w) <= opts.width) {\n                result.outputFigText = w;\n                if (i < figChars.length) {\n                    result.chars = figChars.slice(i);\n                } else {\n                    result.chars = [];\n                }\n                break;\n            }\n        }\n        return result;\n    }\n\n    function generateFigTextLines(txt, figChars, opts) {\n        var charIndex, figChar, spaceIndex, overlap = 0, row, outputFigText, len, height=opts.height, outputFigLines = [], maxWidth, prevWidth, nextFigChars, figWords = [], char, isSpace, textFigWord, textFigLine, tmpBreak;\n\n        outputFigText = newFigChar(height);\n        if (opts.width > 0 && opts.whitespaceBreak) {\n            // list of characters is used to break in the middle of the word when word is logner\n            // chars is array of characters with {fig, overlap} and overlap is for whole word\n            nextFigChars = {\n                chars: [],\n                overlap: overlap\n            };\n        }\n        if (opts.printDirection === 1) {\n            txt = txt.split('').reverse().join('');\n        }\n        len = txt.length;\n        for (charIndex = 0; charIndex < len; charIndex++) {\n            char = txt.substr(charIndex, 1);\n            isSpace = char.match(/\\s/);\n            figChar = figChars[char.charCodeAt(0)];\n            textFigLine = null;\n            if (figChar) {\n                if (opts.fittingRules.hLayout !== FULL_WIDTH) {\n                    overlap = 10000;// a value too high to be the overlap\n                    for (row = 0; row < opts.height; row++) {\n                        overlap = Math.min(overlap, getHorizontalSmushLength(outputFigText[row], figChar[row], opts));\n                    }\n                    overlap = (overlap === 10000) ? 0 : overlap;\n                }\n                if (opts.width > 0) {\n                    if (opts.whitespaceBreak) {\n                        // next character in last word (figChars have same data as words)\n                        textFigWord = joinFigArray(nextFigChars.chars.concat([{\n                            fig: figChar, overlap: overlap\n                        }]), height, opts);\n                        textFigLine = joinFigArray(figWords.concat([{\n                            fig: textFigWord, overlap: nextFigChars.overlap\n                        }]), height, opts);\n                        maxWidth = figLinesWidth(textFigLine);\n                    } else {\n                        textFigLine = horizontalSmush(outputFigText, figChar, overlap, opts);\n                        maxWidth = figLinesWidth(textFigLine);\n                    }\n                    if (maxWidth >= opts.width && charIndex > 0) {\n                        if (opts.whitespaceBreak) {\n                            outputFigText = joinFigArray(figWords.slice(0, -1), height, opts);\n                            if (figWords.length > 1) {\n                                outputFigLines.push(outputFigText);\n                                outputFigText = newFigChar(height);\n                            }\n                            figWords = [];\n                        } else {\n                            outputFigLines.push(outputFigText);\n                            outputFigText = newFigChar(height);\n                        }\n                    }\n                }\n                if (opts.width > 0 && opts.whitespaceBreak) {\n                    if (!isSpace || charIndex === len - 1) {\n                        nextFigChars.chars.push({fig: figChar, overlap: overlap});\n                    }\n                    if (isSpace || charIndex === len - 1) {\n                        // break long words\n                        tmpBreak = null;\n                        while (true) {\n                            textFigLine = joinFigArray(nextFigChars.chars, height, opts);\n                            maxWidth = figLinesWidth(textFigLine);\n                            if (maxWidth >= opts.width) {\n                                tmpBreak = breakWord(nextFigChars.chars, height, opts);\n                                nextFigChars = { chars: tmpBreak.chars };\n                                outputFigLines.push(tmpBreak.outputFigText);\n                            } else {\n                                break;\n                            }\n                        }\n                        // any leftovers\n                        if (maxWidth > 0) {\n                            if (tmpBreak) {\n                                figWords.push({fig: textFigLine, overlap: 1});\n                            } else {\n                                figWords.push({\n                                    fig: textFigLine,\n                                    overlap: nextFigChars.overlap\n                                });\n                            }\n                        }\n                        // save space character and current overlap for smush in joinFigWords\n                        if (isSpace) {\n                            figWords.push({fig: figChar, overlap: overlap});\n                            outputFigText = newFigChar(height);\n                        }\n                        if (charIndex === len - 1) {\n                            // last line\n                            outputFigText = joinFigArray(figWords, height, opts);\n                        }\n                        nextFigChars = {\n                            chars: [],\n                            overlap: overlap\n                        };\n                        continue;\n                    }\n                }\n                outputFigText = horizontalSmush(outputFigText, figChar, overlap, opts);\n            }\n        }\n        // special case when last line would be empty\n        // this may happen if text fit exactly opt.width\n        if (figLinesWidth(outputFigText) > 0) {\n            outputFigLines.push(outputFigText);\n        }\n        // remove hardblanks\n        if (opts.showHardBlanks !== true) {\n            outputFigLines.forEach(function(outputFigText) {\n                len = outputFigText.length;\n                for (row = 0; row < len; row++) {\n                    outputFigText[row] = outputFigText[row].replace(new RegExp(\"\\\\\"+opts.hardBlank,\"g\"),\" \");\n                }\n            });\n        }\n        return outputFigLines;\n    }\n\n    // -------------------------------------------------------------------------\n    // Parsing and Generation methods\n\n    var getHorizontalFittingRules = function(layout, options) {\n        var props = [\"hLayout\", \"hRule1\",\"hRule2\",\"hRule3\",\"hRule4\",\"hRule5\",\"hRule6\"],\n            params = {}, prop, ii;\n        if (layout === \"default\") {\n            for (ii = 0; ii < props.length; ii++) {\n                params[props[ii]] = options.fittingRules[props[ii]];\n            }\n        } else if (layout === \"full\") {\n            params = {\"hLayout\": FULL_WIDTH,\"hRule1\":false,\"hRule2\":false,\"hRule3\":false,\"hRule4\":false,\"hRule5\":false,\"hRule6\":false};\n        } else if (layout === \"fitted\") {\n            params = {\"hLayout\": FITTING,\"hRule1\":false,\"hRule2\":false,\"hRule3\":false,\"hRule4\":false,\"hRule5\":false,\"hRule6\":false};\n        } else if (layout === \"controlled smushing\") {\n            params = {\"hLayout\": CONTROLLED_SMUSHING,\"hRule1\":true,\"hRule2\":true,\"hRule3\":true,\"hRule4\":true,\"hRule5\":true,\"hRule6\":true};\n        } else if (layout === \"universal smushing\") {\n            params = {\"hLayout\": SMUSHING,\"hRule1\":false,\"hRule2\":false,\"hRule3\":false,\"hRule4\":false,\"hRule5\":false,\"hRule6\":false};\n        } else {\n            return;\n        }\n        return params;\n    };\n\n    var getVerticalFittingRules = function(layout, options) {\n        var props = [\"vLayout\", \"vRule1\",\"vRule2\",\"vRule3\",\"vRule4\",\"vRule5\"],\n            params = {}, prop, ii;\n        if (layout === \"default\") {\n            for (ii = 0; ii < props.length; ii++) {\n                params[props[ii]] = options.fittingRules[props[ii]];\n            }\n        } else if (layout === \"full\") {\n            params = {\"vLayout\": FULL_WIDTH,\"vRule1\":false,\"vRule2\":false,\"vRule3\":false,\"vRule4\":false,\"vRule5\":false};\n        } else if (layout === \"fitted\") {\n            params = {\"vLayout\": FITTING,\"vRule1\":false,\"vRule2\":false,\"vRule3\":false,\"vRule4\":false,\"vRule5\":false};\n        } else if (layout === \"controlled smushing\") {\n            params = {\"vLayout\": CONTROLLED_SMUSHING,\"vRule1\":true,\"vRule2\":true,\"vRule3\":true,\"vRule4\":true,\"vRule5\":true};\n        } else if (layout === \"universal smushing\") {\n            params = {\"vLayout\": SMUSHING,\"vRule1\":false,\"vRule2\":false,\"vRule3\":false,\"vRule4\":false,\"vRule5\":false};\n        } else {\n            return;\n        }\n        return params;\n    };\n    /*\n        Return max line of the ASCII Art\n        - text is array of lines for text\n        - char is next character\n     */\n    var figLinesWidth = function(textLines) {\n        return Math.max.apply(Math, textLines.map(function(line, i) {\n            return line.length;\n        }));\n    };\n\n    /*\n        Generates the ASCII Art\n        - fontName: Font to use\n        - option: Options to override the defaults\n        - txt: The text to make into ASCII Art\n    */\n    var generateText = function(fontName, options, txt) {\n        txt = txt.replace(/\\r\\n/g,\"\\n\").replace(/\\r/g,\"\\n\");\n        var lines = txt.split(\"\\n\");\n        var figLines = [];\n        var ii, len, output;\n        len = lines.length;\n        for (ii = 0; ii < len; ii++) {\n            figLines = figLines.concat( generateFigTextLines(lines[ii], figFonts[fontName], options) );\n        }\n        len = figLines.length;\n        output = figLines[0];\n        for (ii = 1; ii < len; ii++) {\n            output = smushVerticalFigLines(output, figLines[ii], options);\n        }\n\n        return output ? output.join(\"\\n\") : '';\n    };\n\n    // -------------------------------------------------------------------------\n    // Public methods\n\n    /*\n        A short-cut for the figlet.text method\n\n        Parameters:\n        - txt (string): The text to make into ASCII Art\n        - options (object/string - optional): Options that will override the current font's default options.\n          If a string is provided instead of an object, it is assumed to be the font name.\n\n            * font\n            * horizontalLayout\n            * verticalLayout\n            * showHardBlanks - Wont remove hardblank characters\n\n        - next (function): A callback function, it will contained the outputted ASCII Art.\n    */\n    var me = function(txt, options, next) {\n        me.text(txt, options, next);\n    };\n    me.text = function(txt, options, next) {\n        var fontName = '';\n\n        // Validate inputs\n        txt = txt + '';\n\n        if (typeof arguments[1] === 'function') {\n            next = options;\n            options = {};\n            options.font = figDefaults.font; // default font\n        }\n\n        if (typeof options === 'string') {\n            fontName = options;\n            options = {};\n        } else {\n            options = options || {};\n            fontName = options.font || figDefaults.font;\n        }\n\n        /*\n            Load the font. If it loads, it's data will be contained in the figFonts object.\n            The callback will recieve a fontsOpts object, which contains the default\n            options of the font (its fitting rules, etc etc).\n        */\n        me.loadFont(fontName, function(err, fontOpts) {\n            if (err) {\n                return next(err);\n            }\n\n            next(null, generateText(fontName, _reworkFontOpts(fontOpts, options), txt));\n        });\n    };\n\n    /*\n        Synchronous version of figlet.text.\n        Accepts the same parameters.\n     */\n    me.textSync = function(txt, options) {\n        var fontName = '';\n\n        // Validate inputs\n        txt = txt + '';\n\n        if (typeof options === 'string') {\n            fontName = options;\n            options = {};\n        } else {\n            options = options || {};\n            fontName = options.font || figDefaults.font;\n        }\n\n        var fontOpts = _reworkFontOpts(me.loadFontSync(fontName), options);\n        return generateText(fontName, fontOpts, txt);\n    };\n\n    /*\n      takes assigned options and merges them with the default options from the choosen font\n     */\n    function _reworkFontOpts(fontOpts, options) {\n        var myOpts = JSON.parse(JSON.stringify(fontOpts)), // make a copy because we may edit this (see below)\n            params,\n            prop;\n\n        /*\n         If the user is chosing to use a specific type of layout (e.g., 'full', 'fitted', etc etc)\n         Then we need to override the default font options.\n         */\n        if (typeof options.horizontalLayout !== 'undefined') {\n            params = getHorizontalFittingRules(options.horizontalLayout, fontOpts);\n            for (prop in params) {\n                if (params.hasOwnProperty(prop)) {\n                    myOpts.fittingRules[prop] = params[prop];\n                }\n            }\n        }\n        if (typeof options.verticalLayout !== 'undefined') {\n            params = getVerticalFittingRules(options.verticalLayout, fontOpts);\n            for (prop in params) {\n                if (params.hasOwnProperty(prop)) {\n                    myOpts.fittingRules[prop] = params[prop];\n                }\n            }\n        }\n        myOpts.printDirection = (typeof options.printDirection !== 'undefined') ? options.printDirection : fontOpts.printDirection;\n        myOpts.showHardBlanks = options.showHardBlanks || false;\n        myOpts.width = options.width || -1;\n        myOpts.whitespaceBreak = options.whitespaceBreak || false;\n\n        return myOpts;\n    }\n\n    /*\n        Returns metadata about a specfic FIGlet font.\n\n        Returns:\n            next(err, options, headerComment)\n            - err: The error if an error occurred, otherwise null/falsey.\n            - options (object): The options defined for the font.\n            - headerComment (string): The font's header comment.\n    */\n    me.metadata = function(fontName, next) {\n        fontName = fontName + '';\n\n        /*\n            Load the font. If it loads, it's data will be contained in the figFonts object.\n            The callback will recieve a fontsOpts object, which contains the default\n            options of the font (its fitting rules, etc etc).\n        */\n        me.loadFont(fontName, function(err, fontOpts) {\n            if (err) {\n                next(err);\n                return;\n            }\n\n            next(null, fontOpts, figFonts[fontName].comment);\n        });\n    };\n\n    /*\n        Allows you to override defaults. See the definition of the figDefaults object up above\n        to see what properties can be overridden.\n        Returns the options for the font.\n    */\n    me.defaults = function(opts) {\n        if (typeof opts === 'object' && opts !== null) {\n            for (var prop in opts) {\n                if (opts.hasOwnProperty(prop)) {\n                    figDefaults[prop] = opts[prop];\n                }\n            }\n        }\n        return JSON.parse(JSON.stringify(figDefaults));\n    };\n\n    /*\n        Parses data from a FIGlet font file and places it into the figFonts object.\n    */\n    me.parseFont = function(fontName, data) {\n        data = data.replace(/\\r\\n/g,\"\\n\").replace(/\\r/g,\"\\n\");\n        figFonts[fontName] = {};\n\n        var lines = data.split(\"\\n\");\n        var headerData = lines.splice(0,1)[0].split(\" \");\n        var figFont = figFonts[fontName];\n        var opts = {};\n\n        opts.hardBlank = headerData[0].substr(5,1);\n        opts.height = parseInt(headerData[1], 10);\n        opts.baseline = parseInt(headerData[2], 10);\n        opts.maxLength = parseInt(headerData[3], 10);\n        opts.oldLayout = parseInt(headerData[4], 10);\n        opts.numCommentLines = parseInt(headerData[5], 10);\n        opts.printDirection = (headerData.length >= 6) ? parseInt(headerData[6], 10) : 0;\n        opts.fullLayout = (headerData.length >= 7) ? parseInt(headerData[7], 10) : null;\n        opts.codeTagCount = (headerData.length >= 8) ? parseInt(headerData[8], 10) : null;\n        opts.fittingRules = getSmushingRules(opts.oldLayout, opts.fullLayout);\n\n        figFont.options = opts;\n\n        // error check\n        if (opts.hardBlank.length !== 1 ||\n            isNaN(opts.height) ||\n            isNaN(opts.baseline) ||\n            isNaN(opts.maxLength) ||\n            isNaN(opts.oldLayout) ||\n            isNaN(opts.numCommentLines) )\n        {\n            throw new Error('FIGlet header contains invalid values.');\n        }\n\n        /*\n            All FIGlet fonts must contain chars 32-126, 196, 214, 220, 228, 246, 252, 223\n        */\n\n        var charNums = [], ii;\n        for (ii = 32; ii <= 126; ii++) {\n            charNums.push(ii);\n        }\n        charNums = charNums.concat(196, 214, 220, 228, 246, 252, 223);\n\n        // error check - validate that there are enough lines in the file\n        if (lines.length < (opts.numCommentLines + (opts.height * charNums.length)) ) {\n            throw new Error('FIGlet file is missing data.');\n        }\n\n        /*\n            Parse out the context of the file and put it into our figFont object\n        */\n\n        var cNum, endCharRegEx, parseError = false;\n\n        figFont.comment = lines.splice(0,opts.numCommentLines).join(\"\\n\");\n        figFont.numChars = 0;\n\n        while (lines.length > 0 && figFont.numChars < charNums.length) {\n            cNum = charNums[figFont.numChars];\n            figFont[cNum] = lines.splice(0,opts.height);\n            // remove end sub-chars\n            for (ii = 0; ii < opts.height; ii++) {\n                if (typeof figFont[cNum][ii] === \"undefined\") {\n                    figFont[cNum][ii] = \"\";\n                } else {\n                    endCharRegEx = new RegExp(\"\\\\\"+figFont[cNum][ii].substr(figFont[cNum][ii].length-1,1)+\"+$\");\n                    figFont[cNum][ii] = figFont[cNum][ii].replace(endCharRegEx,\"\");\n                }\n            }\n            figFont.numChars++;\n        }\n\n        /*\n            Now we check to see if any additional characters are present\n        */\n\n        while (lines.length > 0) {\n            cNum = lines.splice(0,1)[0].split(\" \")[0];\n            if ( /^0[xX][0-9a-fA-F]+$/.test(cNum) ) {\n                cNum = parseInt(cNum, 16);\n            } else if ( /^0[0-7]+$/.test(cNum) ) {\n                cNum = parseInt(cNum, 8);\n            } else if ( /^[0-9]+$/.test(cNum) ) {\n                cNum = parseInt(cNum, 10);\n            } else if ( /^-0[xX][0-9a-fA-F]+$/.test(cNum) ) {\n                cNum = parseInt(cNum, 16);\n            } else {\n                if (cNum === \"\") {break;}\n                // something's wrong\n                console.log(\"Invalid data:\"+cNum);\n                parseError = true;\n                break;\n            }\n\n            figFont[cNum] = lines.splice(0,opts.height);\n            // remove end sub-chars\n            for (ii = 0; ii < opts.height; ii++) {\n                if (typeof figFont[cNum][ii] === \"undefined\") {\n                    figFont[cNum][ii] = \"\";\n                } else {\n                    endCharRegEx = new RegExp(\"\\\\\"+figFont[cNum][ii].substr(figFont[cNum][ii].length-1,1)+\"+$\");\n                    figFont[cNum][ii] = figFont[cNum][ii].replace(endCharRegEx,\"\");\n                }\n            }\n            figFont.numChars++;\n        }\n\n        // error check\n        if (parseError === true) {\n            throw new Error('Error parsing data.');\n        }\n\n        return opts;\n    };\n\n    /*\n        Loads a font.\n    */\n    me.loadFont = function(fontName, next) {\n        if (figFonts[fontName]) {\n            next(null, figFonts[fontName].options);\n            return;\n        }\n\n        if (typeof fetch !== 'function') {\n          console.error('figlet.js requires the fetch API or a fetch polyfill such as https://cdnjs.com/libraries/fetch');\n          throw new Error('fetch is required for figlet.js to work.')\n        }\n\n        fetch(figDefaults.fontPath + '/' + fontName + '.flf')\n            .then(function(response) {\n                if(response.ok) {\n                    return response.text();\n                }\n\n                console.log('Unexpected response', response);\n                throw new Error('Network response was not ok.');\n            })\n            .then(function(text) {\n                next(null, me.parseFont(fontName, text));\n            })\n            .catch(next);\n    };\n\n    /*\n        loads a font synchronously, not implemented for the browser\n     */\n    me.loadFontSync = function(name) {\n        if (figFonts[name]) {\n          return figFonts[name].options;\n        }\n        throw new Error('synchronous font loading is not implemented for the browser');\n    };\n\n    /*\n        preloads a list of fonts prior to using textSync\n        - fonts: an array of font names (i.e. [\"Standard\",\"Soft\"])\n        - next: callback function\n     */\n    me.preloadFonts = function(fonts, next) {\n        var fontData = [];\n\n        fonts.reduce(function(promise, name){\n            return promise.then(function() {\n                return fetch(figDefaults.fontPath + '/' + name + '.flf').then((response) => {\n                    return response.text();\n                }).then(function(data) {\n                    fontData.push(data);\n                });\n            });\n        }, Promise.resolve()).then(function(res){\n            for(var i in fonts){\n                if (fonts.hasOwnProperty(i)) {\n                    me.parseFont(fonts[i], fontData[i]);\n                }\n            }\n\n            if(next)next();\n        });\n    };\n\n    me.figFonts = figFonts;\n\n    return me;\n})();\n\n// for node.js\nif (typeof module !== 'undefined') {\n    if (typeof module.exports !== 'undefined') {\n        module.exports = figlet;\n    }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}