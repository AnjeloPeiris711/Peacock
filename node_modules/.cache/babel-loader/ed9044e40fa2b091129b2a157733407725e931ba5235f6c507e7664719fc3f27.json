{"ast":null,"code":"// The programming goals of Split.js are to deliver readable, understandable and\n// maintainable code, while at the same time manually optimizing for tiny minified file size,\n// browser compatibility without additional requirements\n// and very few assumptions about the user's page layout.\nvar global = typeof window !== 'undefined' ? window : null;\nvar ssr = global === null;\nvar document = !ssr ? global.document : undefined; // Save a couple long function names that are used frequently.\n// This optimization saves around 400 bytes.\n\nvar addEventListener = 'addEventListener';\nvar removeEventListener = 'removeEventListener';\nvar getBoundingClientRect = 'getBoundingClientRect';\nvar gutterStartDragging = '_a';\nvar aGutterSize = '_b';\nvar bGutterSize = '_c';\nvar HORIZONTAL = 'horizontal';\n\nvar NOOP = function NOOP() {\n  return false;\n}; // Helper function determines which prefixes of CSS calc we need.\n// We only need to do this once on startup, when this anonymous function is called.\n//\n// Tests -webkit, -moz and -o prefixes. Modified from StackOverflow:\n// http://stackoverflow.com/questions/16625140/js-feature-detection-to-detect-the-usage-of-webkit-calc-over-calc/16625167#16625167\n\n\nvar calc = ssr ? 'calc' : ['', '-webkit-', '-moz-', '-o-'].filter(function (prefix) {\n  var el = document.createElement('div');\n  el.style.cssText = \"width:\" + prefix + \"calc(9px)\";\n  return !!el.style.length;\n}).shift() + \"calc\"; // Helper function checks if its argument is a string-like type\n\nvar isString = function isString(v) {\n  return typeof v === 'string' || v instanceof String;\n}; // Helper function allows elements and string selectors to be used\n// interchangeably. In either case an element is returned. This allows us to\n// do `Split([elem1, elem2])` as well as `Split(['#id1', '#id2'])`.\n\n\nvar elementOrSelector = function elementOrSelector(el) {\n  if (isString(el)) {\n    var ele = document.querySelector(el);\n\n    if (!ele) {\n      throw new Error(\"Selector \" + el + \" did not match a DOM element\");\n    }\n\n    return ele;\n  }\n\n  return el;\n}; // Helper function gets a property from the properties object, with a default fallback\n\n\nvar getOption = function getOption(options, propName, def) {\n  var value = options[propName];\n\n  if (value !== undefined) {\n    return value;\n  }\n\n  return def;\n};\n\nvar getGutterSize = function getGutterSize(gutterSize, isFirst, isLast, gutterAlign) {\n  if (isFirst) {\n    if (gutterAlign === 'end') {\n      return 0;\n    }\n\n    if (gutterAlign === 'center') {\n      return gutterSize / 2;\n    }\n  } else if (isLast) {\n    if (gutterAlign === 'start') {\n      return 0;\n    }\n\n    if (gutterAlign === 'center') {\n      return gutterSize / 2;\n    }\n  }\n\n  return gutterSize;\n}; // Default options\n\n\nvar defaultGutterFn = function defaultGutterFn(i, gutterDirection) {\n  var gut = document.createElement('div');\n  gut.className = \"gutter gutter-\" + gutterDirection;\n  return gut;\n};\n\nvar defaultElementStyleFn = function defaultElementStyleFn(dim, size, gutSize) {\n  var style = {};\n\n  if (!isString(size)) {\n    style[dim] = calc + \"(\" + size + \"% - \" + gutSize + \"px)\";\n  } else {\n    style[dim] = size;\n  }\n\n  return style;\n};\n\nvar defaultGutterStyleFn = function defaultGutterStyleFn(dim, gutSize) {\n  var obj;\n  return obj = {}, obj[dim] = gutSize + \"px\", obj;\n}; // The main function to initialize a split. Split.js thinks about each pair\n// of elements as an independant pair. Dragging the gutter between two elements\n// only changes the dimensions of elements in that pair. This is key to understanding\n// how the following functions operate, since each function is bound to a pair.\n//\n// A pair object is shaped like this:\n//\n// {\n//     a: DOM element,\n//     b: DOM element,\n//     aMin: Number,\n//     bMin: Number,\n//     dragging: Boolean,\n//     parent: DOM element,\n//     direction: 'horizontal' | 'vertical'\n// }\n//\n// The basic sequence:\n//\n// 1. Set defaults to something sane. `options` doesn't have to be passed at all.\n// 2. Initialize a bunch of strings based on the direction we're splitting.\n//    A lot of the behavior in the rest of the library is paramatized down to\n//    rely on CSS strings and classes.\n// 3. Define the dragging helper functions, and a few helpers to go with them.\n// 4. Loop through the elements while pairing them off. Every pair gets an\n//    `pair` object and a gutter.\n// 5. Actually size the pair elements, insert gutters and attach event listeners.\n\n\nvar Split = function Split(idsOption, options) {\n  if (options === void 0) options = {};\n\n  if (ssr) {\n    return {};\n  }\n\n  var ids = idsOption;\n  var dimension;\n  var clientAxis;\n  var position;\n  var positionEnd;\n  var clientSize;\n  var elements; // Allow HTMLCollection to be used as an argument when supported\n\n  if (Array.from) {\n    ids = Array.from(ids);\n  } // All DOM elements in the split should have a common parent. We can grab\n  // the first elements parent and hope users read the docs because the\n  // behavior will be whacky otherwise.\n\n\n  var firstElement = elementOrSelector(ids[0]);\n  var parent = firstElement.parentNode;\n  var parentStyle = getComputedStyle ? getComputedStyle(parent) : null;\n  var parentFlexDirection = parentStyle ? parentStyle.flexDirection : null; // Set default options.sizes to equal percentages of the parent element.\n\n  var sizes = getOption(options, 'sizes') || ids.map(function () {\n    return 100 / ids.length;\n  }); // Standardize minSize and maxSize to an array if it isn't already.\n  // This allows minSize and maxSize to be passed as a number.\n\n  var minSize = getOption(options, 'minSize', 100);\n  var minSizes = Array.isArray(minSize) ? minSize : ids.map(function () {\n    return minSize;\n  });\n  var maxSize = getOption(options, 'maxSize', Infinity);\n  var maxSizes = Array.isArray(maxSize) ? maxSize : ids.map(function () {\n    return maxSize;\n  }); // Get other options\n\n  var expandToMin = getOption(options, 'expandToMin', false);\n  var gutterSize = getOption(options, 'gutterSize', 10);\n  var gutterAlign = getOption(options, 'gutterAlign', 'center');\n  var snapOffset = getOption(options, 'snapOffset', 30);\n  var snapOffsets = Array.isArray(snapOffset) ? snapOffset : ids.map(function () {\n    return snapOffset;\n  });\n  var dragInterval = getOption(options, 'dragInterval', 1);\n  var direction = getOption(options, 'direction', HORIZONTAL);\n  var cursor = getOption(options, 'cursor', direction === HORIZONTAL ? 'col-resize' : 'row-resize');\n  var gutter = getOption(options, 'gutter', defaultGutterFn);\n  var elementStyle = getOption(options, 'elementStyle', defaultElementStyleFn);\n  var gutterStyle = getOption(options, 'gutterStyle', defaultGutterStyleFn); // 2. Initialize a bunch of strings based on the direction we're splitting.\n  // A lot of the behavior in the rest of the library is paramatized down to\n  // rely on CSS strings and classes.\n\n  if (direction === HORIZONTAL) {\n    dimension = 'width';\n    clientAxis = 'clientX';\n    position = 'left';\n    positionEnd = 'right';\n    clientSize = 'clientWidth';\n  } else if (direction === 'vertical') {\n    dimension = 'height';\n    clientAxis = 'clientY';\n    position = 'top';\n    positionEnd = 'bottom';\n    clientSize = 'clientHeight';\n  } // 3. Define the dragging helper functions, and a few helpers to go with them.\n  // Each helper is bound to a pair object that contains its metadata. This\n  // also makes it easy to store references to listeners that that will be\n  // added and removed.\n  //\n  // Even though there are no other functions contained in them, aliasing\n  // this to self saves 50 bytes or so since it's used so frequently.\n  //\n  // The pair object saves metadata like dragging state, position and\n  // event listener references.\n\n\n  function setElementSize(el, size, gutSize, i) {\n    // Split.js allows setting sizes via numbers (ideally), or if you must,\n    // by string, like '300px'. This is less than ideal, because it breaks\n    // the fluid layout that `calc(% - px)` provides. You're on your own if you do that,\n    // make sure you calculate the gutter size by hand.\n    var style = elementStyle(dimension, size, gutSize, i);\n    Object.keys(style).forEach(function (prop) {\n      // eslint-disable-next-line no-param-reassign\n      el.style[prop] = style[prop];\n    });\n  }\n\n  function setGutterSize(gutterElement, gutSize, i) {\n    var style = gutterStyle(dimension, gutSize, i);\n    Object.keys(style).forEach(function (prop) {\n      // eslint-disable-next-line no-param-reassign\n      gutterElement.style[prop] = style[prop];\n    });\n  }\n\n  function getSizes() {\n    return elements.map(function (element) {\n      return element.size;\n    });\n  } // Supports touch events, but not multitouch, so only the first\n  // finger `touches[0]` is counted.\n\n\n  function getMousePosition(e) {\n    if ('touches' in e) {\n      return e.touches[0][clientAxis];\n    }\n\n    return e[clientAxis];\n  } // Actually adjust the size of elements `a` and `b` to `offset` while dragging.\n  // calc is used to allow calc(percentage + gutterpx) on the whole split instance,\n  // which allows the viewport to be resized without additional logic.\n  // Element a's size is the same as offset. b's size is total size - a size.\n  // Both sizes are calculated from the initial parent percentage,\n  // then the gutter size is subtracted.\n\n\n  function adjust(offset) {\n    var a = elements[this.a];\n    var b = elements[this.b];\n    var percentage = a.size + b.size;\n    a.size = offset / this.size * percentage;\n    b.size = percentage - offset / this.size * percentage;\n    setElementSize(a.element, a.size, this[aGutterSize], a.i);\n    setElementSize(b.element, b.size, this[bGutterSize], b.i);\n  } // drag, where all the magic happens. The logic is really quite simple:\n  //\n  // 1. Ignore if the pair is not dragging.\n  // 2. Get the offset of the event.\n  // 3. Snap offset to min if within snappable range (within min + snapOffset).\n  // 4. Actually adjust each element in the pair to offset.\n  //\n  // ---------------------------------------------------------------------\n  // |    | <- a.minSize               ||              b.minSize -> |    |\n  // |    |  | <- this.snapOffset      ||     this.snapOffset -> |  |    |\n  // |    |  |                         ||                        |  |    |\n  // |    |  |                         ||                        |  |    |\n  // ---------------------------------------------------------------------\n  // | <- this.start                                        this.size -> |\n\n\n  function drag(e) {\n    var offset;\n    var a = elements[this.a];\n    var b = elements[this.b];\n\n    if (!this.dragging) {\n      return;\n    } // Get the offset of the event from the first side of the\n    // pair `this.start`. Then offset by the initial position of the\n    // mouse compared to the gutter size.\n\n\n    offset = getMousePosition(e) - this.start + (this[aGutterSize] - this.dragOffset);\n\n    if (dragInterval > 1) {\n      offset = Math.round(offset / dragInterval) * dragInterval;\n    } // If within snapOffset of min or max, set offset to min or max.\n    // snapOffset buffers a.minSize and b.minSize, so logic is opposite for both.\n    // Include the appropriate gutter sizes to prevent overflows.\n\n\n    if (offset <= a.minSize + a.snapOffset + this[aGutterSize]) {\n      offset = a.minSize + this[aGutterSize];\n    } else if (offset >= this.size - (b.minSize + b.snapOffset + this[bGutterSize])) {\n      offset = this.size - (b.minSize + this[bGutterSize]);\n    }\n\n    if (offset >= a.maxSize - a.snapOffset + this[aGutterSize]) {\n      offset = a.maxSize + this[aGutterSize];\n    } else if (offset <= this.size - (b.maxSize - b.snapOffset + this[bGutterSize])) {\n      offset = this.size - (b.maxSize + this[bGutterSize]);\n    } // Actually adjust the size.\n\n\n    adjust.call(this, offset); // Call the drag callback continously. Don't do anything too intensive\n    // in this callback.\n\n    getOption(options, 'onDrag', NOOP)(getSizes());\n  } // Cache some important sizes when drag starts, so we don't have to do that\n  // continously:\n  //\n  // `size`: The total size of the pair. First + second + first gutter + second gutter.\n  // `start`: The leading side of the first element.\n  //\n  // ------------------------------------------------\n  // |      aGutterSize -> |||                      |\n  // |                     |||                      |\n  // |                     |||                      |\n  // |                     ||| <- bGutterSize       |\n  // ------------------------------------------------\n  // | <- start                             size -> |\n\n\n  function calculateSizes() {\n    // Figure out the parent size minus padding.\n    var a = elements[this.a].element;\n    var b = elements[this.b].element;\n    var aBounds = a[getBoundingClientRect]();\n    var bBounds = b[getBoundingClientRect]();\n    this.size = aBounds[dimension] + bBounds[dimension] + this[aGutterSize] + this[bGutterSize];\n    this.start = aBounds[position];\n    this.end = aBounds[positionEnd];\n  }\n\n  function innerSize(element) {\n    // Return nothing if getComputedStyle is not supported (< IE9)\n    // Or if parent element has no layout yet\n    if (!getComputedStyle) {\n      return null;\n    }\n\n    var computedStyle = getComputedStyle(element);\n\n    if (!computedStyle) {\n      return null;\n    }\n\n    var size = element[clientSize];\n\n    if (size === 0) {\n      return null;\n    }\n\n    if (direction === HORIZONTAL) {\n      size -= parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);\n    } else {\n      size -= parseFloat(computedStyle.paddingTop) + parseFloat(computedStyle.paddingBottom);\n    }\n\n    return size;\n  } // When specifying percentage sizes that are less than the computed\n  // size of the element minus the gutter, the lesser percentages must be increased\n  // (and decreased from the other elements) to make space for the pixels\n  // subtracted by the gutters.\n\n\n  function trimToMin(sizesToTrim) {\n    // Try to get inner size of parent element.\n    // If it's no supported, return original sizes.\n    var parentSize = innerSize(parent);\n\n    if (parentSize === null) {\n      return sizesToTrim;\n    }\n\n    if (minSizes.reduce(function (a, b) {\n      return a + b;\n    }, 0) > parentSize) {\n      return sizesToTrim;\n    } // Keep track of the excess pixels, the amount of pixels over the desired percentage\n    // Also keep track of the elements with pixels to spare, to decrease after if needed\n\n\n    var excessPixels = 0;\n    var toSpare = [];\n    var pixelSizes = sizesToTrim.map(function (size, i) {\n      // Convert requested percentages to pixel sizes\n      var pixelSize = parentSize * size / 100;\n      var elementGutterSize = getGutterSize(gutterSize, i === 0, i === sizesToTrim.length - 1, gutterAlign);\n      var elementMinSize = minSizes[i] + elementGutterSize; // If element is too smal, increase excess pixels by the difference\n      // and mark that it has no pixels to spare\n\n      if (pixelSize < elementMinSize) {\n        excessPixels += elementMinSize - pixelSize;\n        toSpare.push(0);\n        return elementMinSize;\n      } // Otherwise, mark the pixels it has to spare and return it's original size\n\n\n      toSpare.push(pixelSize - elementMinSize);\n      return pixelSize;\n    }); // If nothing was adjusted, return the original sizes\n\n    if (excessPixels === 0) {\n      return sizesToTrim;\n    }\n\n    return pixelSizes.map(function (pixelSize, i) {\n      var newPixelSize = pixelSize; // While there's still pixels to take, and there's enough pixels to spare,\n      // take as many as possible up to the total excess pixels\n\n      if (excessPixels > 0 && toSpare[i] - excessPixels > 0) {\n        var takenPixels = Math.min(excessPixels, toSpare[i] - excessPixels); // Subtract the amount taken for the next iteration\n\n        excessPixels -= takenPixels;\n        newPixelSize = pixelSize - takenPixels;\n      } // Return the pixel size adjusted as a percentage\n\n\n      return newPixelSize / parentSize * 100;\n    });\n  } // stopDragging is very similar to startDragging in reverse.\n\n\n  function stopDragging() {\n    var self = this;\n    var a = elements[self.a].element;\n    var b = elements[self.b].element;\n\n    if (self.dragging) {\n      getOption(options, 'onDragEnd', NOOP)(getSizes());\n    }\n\n    self.dragging = false; // Remove the stored event listeners. This is why we store them.\n\n    global[removeEventListener]('mouseup', self.stop);\n    global[removeEventListener]('touchend', self.stop);\n    global[removeEventListener]('touchcancel', self.stop);\n    global[removeEventListener]('mousemove', self.move);\n    global[removeEventListener]('touchmove', self.move); // Clear bound function references\n\n    self.stop = null;\n    self.move = null;\n    a[removeEventListener]('selectstart', NOOP);\n    a[removeEventListener]('dragstart', NOOP);\n    b[removeEventListener]('selectstart', NOOP);\n    b[removeEventListener]('dragstart', NOOP);\n    a.style.userSelect = '';\n    a.style.webkitUserSelect = '';\n    a.style.MozUserSelect = '';\n    a.style.pointerEvents = '';\n    b.style.userSelect = '';\n    b.style.webkitUserSelect = '';\n    b.style.MozUserSelect = '';\n    b.style.pointerEvents = '';\n    self.gutter.style.cursor = '';\n    self.parent.style.cursor = '';\n    document.body.style.cursor = '';\n  } // startDragging calls `calculateSizes` to store the inital size in the pair object.\n  // It also adds event listeners for mouse/touch events,\n  // and prevents selection while dragging so avoid the selecting text.\n\n\n  function startDragging(e) {\n    // Right-clicking can't start dragging.\n    if ('button' in e && e.button !== 0) {\n      return;\n    } // Alias frequently used variables to save space. 200 bytes.\n\n\n    var self = this;\n    var a = elements[self.a].element;\n    var b = elements[self.b].element; // Call the onDragStart callback.\n\n    if (!self.dragging) {\n      getOption(options, 'onDragStart', NOOP)(getSizes());\n    } // Don't actually drag the element. We emulate that in the drag function.\n\n\n    e.preventDefault(); // Set the dragging property of the pair object.\n\n    self.dragging = true; // Create two event listeners bound to the same pair object and store\n    // them in the pair object.\n\n    self.move = drag.bind(self);\n    self.stop = stopDragging.bind(self); // All the binding. `window` gets the stop events in case we drag out of the elements.\n\n    global[addEventListener]('mouseup', self.stop);\n    global[addEventListener]('touchend', self.stop);\n    global[addEventListener]('touchcancel', self.stop);\n    global[addEventListener]('mousemove', self.move);\n    global[addEventListener]('touchmove', self.move); // Disable selection. Disable!\n\n    a[addEventListener]('selectstart', NOOP);\n    a[addEventListener]('dragstart', NOOP);\n    b[addEventListener]('selectstart', NOOP);\n    b[addEventListener]('dragstart', NOOP);\n    a.style.userSelect = 'none';\n    a.style.webkitUserSelect = 'none';\n    a.style.MozUserSelect = 'none';\n    a.style.pointerEvents = 'none';\n    b.style.userSelect = 'none';\n    b.style.webkitUserSelect = 'none';\n    b.style.MozUserSelect = 'none';\n    b.style.pointerEvents = 'none'; // Set the cursor at multiple levels\n\n    self.gutter.style.cursor = cursor;\n    self.parent.style.cursor = cursor;\n    document.body.style.cursor = cursor; // Cache the initial sizes of the pair.\n\n    calculateSizes.call(self); // Determine the position of the mouse compared to the gutter\n\n    self.dragOffset = getMousePosition(e) - self.end;\n  } // adjust sizes to ensure percentage is within min size and gutter.\n\n\n  sizes = trimToMin(sizes); // 5. Create pair and element objects. Each pair has an index reference to\n  // elements `a` and `b` of the pair (first and second elements).\n  // Loop through the elements while pairing them off. Every pair gets a\n  // `pair` object and a gutter.\n  //\n  // Basic logic:\n  //\n  // - Starting with the second element `i > 0`, create `pair` objects with\n  //   `a = i - 1` and `b = i`\n  // - Set gutter sizes based on the _pair_ being first/last. The first and last\n  //   pair have gutterSize / 2, since they only have one half gutter, and not two.\n  // - Create gutter elements and add event listeners.\n  // - Set the size of the elements, minus the gutter sizes.\n  //\n  // -----------------------------------------------------------------------\n  // |     i=0     |         i=1         |        i=2       |      i=3     |\n  // |             |                     |                  |              |\n  // |           pair 0                pair 1             pair 2           |\n  // |             |                     |                  |              |\n  // -----------------------------------------------------------------------\n\n  var pairs = [];\n  elements = ids.map(function (id, i) {\n    // Create the element object.\n    var element = {\n      element: elementOrSelector(id),\n      size: sizes[i],\n      minSize: minSizes[i],\n      maxSize: maxSizes[i],\n      snapOffset: snapOffsets[i],\n      i: i\n    };\n    var pair;\n\n    if (i > 0) {\n      // Create the pair object with its metadata.\n      pair = {\n        a: i - 1,\n        b: i,\n        dragging: false,\n        direction: direction,\n        parent: parent\n      };\n      pair[aGutterSize] = getGutterSize(gutterSize, i - 1 === 0, false, gutterAlign);\n      pair[bGutterSize] = getGutterSize(gutterSize, false, i === ids.length - 1, gutterAlign); // if the parent has a reverse flex-direction, switch the pair elements.\n\n      if (parentFlexDirection === 'row-reverse' || parentFlexDirection === 'column-reverse') {\n        var temp = pair.a;\n        pair.a = pair.b;\n        pair.b = temp;\n      }\n    } // Determine the size of the current element. IE8 is supported by\n    // staticly assigning sizes without draggable gutters. Assigns a string\n    // to `size`.\n    //\n    // Create gutter elements for each pair.\n\n\n    if (i > 0) {\n      var gutterElement = gutter(i, direction, element.element);\n      setGutterSize(gutterElement, gutterSize, i); // Save bound event listener for removal later\n\n      pair[gutterStartDragging] = startDragging.bind(pair); // Attach bound event listener\n\n      gutterElement[addEventListener]('mousedown', pair[gutterStartDragging]);\n      gutterElement[addEventListener]('touchstart', pair[gutterStartDragging]);\n      parent.insertBefore(gutterElement, element.element);\n      pair.gutter = gutterElement;\n    }\n\n    setElementSize(element.element, element.size, getGutterSize(gutterSize, i === 0, i === ids.length - 1, gutterAlign), i); // After the first iteration, and we have a pair object, append it to the\n    // list of pairs.\n\n    if (i > 0) {\n      pairs.push(pair);\n    }\n\n    return element;\n  });\n\n  function adjustToMin(element) {\n    var isLast = element.i === pairs.length;\n    var pair = isLast ? pairs[element.i - 1] : pairs[element.i];\n    calculateSizes.call(pair);\n    var size = isLast ? pair.size - element.minSize - pair[bGutterSize] : element.minSize + pair[aGutterSize];\n    adjust.call(pair, size);\n  }\n\n  elements.forEach(function (element) {\n    var computedSize = element.element[getBoundingClientRect]()[dimension];\n\n    if (computedSize < element.minSize) {\n      if (expandToMin) {\n        adjustToMin(element);\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        element.minSize = computedSize;\n      }\n    }\n  });\n\n  function setSizes(newSizes) {\n    var trimmed = trimToMin(newSizes);\n    trimmed.forEach(function (newSize, i) {\n      if (i > 0) {\n        var pair = pairs[i - 1];\n        var a = elements[pair.a];\n        var b = elements[pair.b];\n        a.size = trimmed[i - 1];\n        b.size = newSize;\n        setElementSize(a.element, a.size, pair[aGutterSize], a.i);\n        setElementSize(b.element, b.size, pair[bGutterSize], b.i);\n      }\n    });\n  }\n\n  function destroy(preserveStyles, preserveGutter) {\n    pairs.forEach(function (pair) {\n      if (preserveGutter !== true) {\n        pair.parent.removeChild(pair.gutter);\n      } else {\n        pair.gutter[removeEventListener]('mousedown', pair[gutterStartDragging]);\n        pair.gutter[removeEventListener]('touchstart', pair[gutterStartDragging]);\n      }\n\n      if (preserveStyles !== true) {\n        var style = elementStyle(dimension, pair.a.size, pair[aGutterSize]);\n        Object.keys(style).forEach(function (prop) {\n          elements[pair.a].element.style[prop] = '';\n          elements[pair.b].element.style[prop] = '';\n        });\n      }\n    });\n  }\n\n  return {\n    setSizes: setSizes,\n    getSizes: getSizes,\n    collapse: function collapse(i) {\n      adjustToMin(elements[i]);\n    },\n    destroy: destroy,\n    parent: parent,\n    pairs: pairs\n  };\n};\n\nexport default Split;","map":{"version":3,"sources":["L:/3rdyearproject/peacock/console-application/node_modules/split.js/dist/split.es.js"],"names":["global","window","ssr","document","undefined","addEventListener","removeEventListener","getBoundingClientRect","gutterStartDragging","aGutterSize","bGutterSize","HORIZONTAL","NOOP","calc","filter","prefix","el","createElement","style","cssText","length","shift","isString","v","String","elementOrSelector","ele","querySelector","Error","getOption","options","propName","def","value","getGutterSize","gutterSize","isFirst","isLast","gutterAlign","defaultGutterFn","i","gutterDirection","gut","className","defaultElementStyleFn","dim","size","gutSize","defaultGutterStyleFn","obj","Split","idsOption","ids","dimension","clientAxis","position","positionEnd","clientSize","elements","Array","from","firstElement","parent","parentNode","parentStyle","getComputedStyle","parentFlexDirection","flexDirection","sizes","map","minSize","minSizes","isArray","maxSize","Infinity","maxSizes","expandToMin","snapOffset","snapOffsets","dragInterval","direction","cursor","gutter","elementStyle","gutterStyle","setElementSize","Object","keys","forEach","prop","setGutterSize","gutterElement","getSizes","element","getMousePosition","e","touches","adjust","offset","a","b","percentage","drag","dragging","start","dragOffset","Math","round","call","calculateSizes","aBounds","bBounds","end","innerSize","computedStyle","parseFloat","paddingLeft","paddingRight","paddingTop","paddingBottom","trimToMin","sizesToTrim","parentSize","reduce","excessPixels","toSpare","pixelSizes","pixelSize","elementGutterSize","elementMinSize","push","newPixelSize","takenPixels","min","stopDragging","self","stop","move","userSelect","webkitUserSelect","MozUserSelect","pointerEvents","body","startDragging","button","preventDefault","bind","pairs","id","pair","temp","insertBefore","adjustToMin","computedSize","setSizes","newSizes","trimmed","newSize","destroy","preserveStyles","preserveGutter","removeChild","collapse"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,MAAM,GAAG,OAAOC,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyC,IAAtD;AACA,IAAIC,GAAG,GAAGF,MAAM,KAAK,IAArB;AACA,IAAIG,QAAQ,GAAG,CAACD,GAAD,GAAOF,MAAM,CAACG,QAAd,GAAyBC,SAAxC,C,CAEA;AACA;;AACA,IAAIC,gBAAgB,GAAG,kBAAvB;AACA,IAAIC,mBAAmB,GAAG,qBAA1B;AACA,IAAIC,qBAAqB,GAAG,uBAA5B;AACA,IAAIC,mBAAmB,GAAG,IAA1B;AACA,IAAIC,WAAW,GAAG,IAAlB;AACA,IAAIC,WAAW,GAAG,IAAlB;AACA,IAAIC,UAAU,GAAG,YAAjB;;AACA,IAAIC,IAAI,GAAG,SAAPA,IAAO,GAAY;AAAE,SAAO,KAAP;AAAe,CAAxC,C,CAEA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,IAAI,GAAGX,GAAG,GACR,MADQ,GAEN,CAAC,EAAD,EAAK,UAAL,EAAiB,OAAjB,EAA0B,KAA1B,EACGY,MADH,CACU,UAAUC,MAAV,EAAkB;AACtB,MAAIC,EAAE,GAAGb,QAAQ,CAACc,aAAT,CAAuB,KAAvB,CAAT;AACAD,EAAAA,EAAE,CAACE,KAAH,CAASC,OAAT,GAAmB,WAAWJ,MAAX,GAAoB,WAAvC;AAEA,SAAO,CAAC,CAACC,EAAE,CAACE,KAAH,CAASE,MAAlB;AACH,CANH,EAOGC,KAPH,EAAD,GAOe,MATtB,C,CAWA;;AACA,IAAIC,QAAQ,GAAG,SAAXA,QAAW,CAAUC,CAAV,EAAa;AAAE,SAAO,OAAOA,CAAP,KAAa,QAAb,IAAyBA,CAAC,YAAYC,MAA7C;AAAsD,CAApF,C,CAEA;AACA;AACA;;;AACA,IAAIC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAUT,EAAV,EAAc;AAClC,MAAIM,QAAQ,CAACN,EAAD,CAAZ,EAAkB;AACd,QAAIU,GAAG,GAAGvB,QAAQ,CAACwB,aAAT,CAAuBX,EAAvB,CAAV;;AACA,QAAI,CAACU,GAAL,EAAU;AACN,YAAM,IAAIE,KAAJ,CAAW,cAAcZ,EAAd,GAAmB,8BAA9B,CAAN;AACH;;AACD,WAAOU,GAAP;AACH;;AAED,SAAOV,EAAP;AACH,CAVD,C,CAYA;;;AACA,IAAIa,SAAS,GAAG,SAAZA,SAAY,CAAUC,OAAV,EAAmBC,QAAnB,EAA6BC,GAA7B,EAAkC;AAC9C,MAAIC,KAAK,GAAGH,OAAO,CAACC,QAAD,CAAnB;;AACA,MAAIE,KAAK,KAAK7B,SAAd,EAAyB;AACrB,WAAO6B,KAAP;AACH;;AACD,SAAOD,GAAP;AACH,CAND;;AAQA,IAAIE,aAAa,GAAG,SAAhBA,aAAgB,CAAUC,UAAV,EAAsBC,OAAtB,EAA+BC,MAA/B,EAAuCC,WAAvC,EAAoD;AACpE,MAAIF,OAAJ,EAAa;AACT,QAAIE,WAAW,KAAK,KAApB,EAA2B;AACvB,aAAO,CAAP;AACH;;AACD,QAAIA,WAAW,KAAK,QAApB,EAA8B;AAC1B,aAAOH,UAAU,GAAG,CAApB;AACH;AACJ,GAPD,MAOO,IAAIE,MAAJ,EAAY;AACf,QAAIC,WAAW,KAAK,OAApB,EAA6B;AACzB,aAAO,CAAP;AACH;;AACD,QAAIA,WAAW,KAAK,QAApB,EAA8B;AAC1B,aAAOH,UAAU,GAAG,CAApB;AACH;AACJ;;AAED,SAAOA,UAAP;AACH,CAlBD,C,CAoBA;;;AACA,IAAII,eAAe,GAAG,SAAlBA,eAAkB,CAAUC,CAAV,EAAaC,eAAb,EAA8B;AAChD,MAAIC,GAAG,GAAGvC,QAAQ,CAACc,aAAT,CAAuB,KAAvB,CAAV;AACAyB,EAAAA,GAAG,CAACC,SAAJ,GAAgB,mBAAmBF,eAAnC;AACA,SAAOC,GAAP;AACH,CAJD;;AAMA,IAAIE,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAUC,GAAV,EAAeC,IAAf,EAAqBC,OAArB,EAA8B;AACtD,MAAI7B,KAAK,GAAG,EAAZ;;AAEA,MAAI,CAACI,QAAQ,CAACwB,IAAD,CAAb,EAAqB;AACjB5B,IAAAA,KAAK,CAAC2B,GAAD,CAAL,GAAahC,IAAI,GAAG,GAAP,GAAaiC,IAAb,GAAoB,MAApB,GAA6BC,OAA7B,GAAuC,KAApD;AACH,GAFD,MAEO;AACH7B,IAAAA,KAAK,CAAC2B,GAAD,CAAL,GAAaC,IAAb;AACH;;AAED,SAAO5B,KAAP;AACH,CAVD;;AAYA,IAAI8B,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAUH,GAAV,EAAeE,OAAf,EAAwB;AAC/C,MAAIE,GAAJ;AAEA,SAAUA,GAAG,GAAG,EAAN,EAAUA,GAAG,CAACJ,GAAD,CAAH,GAAYE,OAAO,GAAG,IAAhC,EAAuCE,GAAjD;AACH,CAJD,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,KAAK,GAAG,SAARA,KAAQ,CAAUC,SAAV,EAAqBrB,OAArB,EAA8B;AACtC,MAAKA,OAAO,KAAK,KAAK,CAAtB,EAA0BA,OAAO,GAAG,EAAV;;AAE1B,MAAI5B,GAAJ,EAAS;AAAE,WAAO,EAAP;AAAW;;AAEtB,MAAIkD,GAAG,GAAGD,SAAV;AACA,MAAIE,SAAJ;AACA,MAAIC,UAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,WAAJ;AACA,MAAIC,UAAJ;AACA,MAAIC,QAAJ,CAXsC,CAatC;;AACA,MAAIC,KAAK,CAACC,IAAV,EAAgB;AACZR,IAAAA,GAAG,GAAGO,KAAK,CAACC,IAAN,CAAWR,GAAX,CAAN;AACH,GAhBqC,CAkBtC;AACA;AACA;;;AACA,MAAIS,YAAY,GAAGpC,iBAAiB,CAAC2B,GAAG,CAAC,CAAD,CAAJ,CAApC;AACA,MAAIU,MAAM,GAAGD,YAAY,CAACE,UAA1B;AACA,MAAIC,WAAW,GAAGC,gBAAgB,GAAGA,gBAAgB,CAACH,MAAD,CAAnB,GAA8B,IAAhE;AACA,MAAII,mBAAmB,GAAGF,WAAW,GAAGA,WAAW,CAACG,aAAf,GAA+B,IAApE,CAxBsC,CA0BtC;;AACA,MAAIC,KAAK,GAAGvC,SAAS,CAACC,OAAD,EAAU,OAAV,CAAT,IAA+BsB,GAAG,CAACiB,GAAJ,CAAQ,YAAY;AAAE,WAAO,MAAMjB,GAAG,CAAChC,MAAjB;AAA0B,GAAhD,CAA3C,CA3BsC,CA6BtC;AACA;;AACA,MAAIkD,OAAO,GAAGzC,SAAS,CAACC,OAAD,EAAU,SAAV,EAAqB,GAArB,CAAvB;AACA,MAAIyC,QAAQ,GAAGZ,KAAK,CAACa,OAAN,CAAcF,OAAd,IAAyBA,OAAzB,GAAmClB,GAAG,CAACiB,GAAJ,CAAQ,YAAY;AAAE,WAAOC,OAAP;AAAiB,GAAvC,CAAlD;AACA,MAAIG,OAAO,GAAG5C,SAAS,CAACC,OAAD,EAAU,SAAV,EAAqB4C,QAArB,CAAvB;AACA,MAAIC,QAAQ,GAAGhB,KAAK,CAACa,OAAN,CAAcC,OAAd,IAAyBA,OAAzB,GAAmCrB,GAAG,CAACiB,GAAJ,CAAQ,YAAY;AAAE,WAAOI,OAAP;AAAiB,GAAvC,CAAlD,CAlCsC,CAoCtC;;AACA,MAAIG,WAAW,GAAG/C,SAAS,CAACC,OAAD,EAAU,aAAV,EAAyB,KAAzB,CAA3B;AACA,MAAIK,UAAU,GAAGN,SAAS,CAACC,OAAD,EAAU,YAAV,EAAwB,EAAxB,CAA1B;AACA,MAAIQ,WAAW,GAAGT,SAAS,CAACC,OAAD,EAAU,aAAV,EAAyB,QAAzB,CAA3B;AACA,MAAI+C,UAAU,GAAGhD,SAAS,CAACC,OAAD,EAAU,YAAV,EAAwB,EAAxB,CAA1B;AACA,MAAIgD,WAAW,GAAGnB,KAAK,CAACa,OAAN,CAAcK,UAAd,IAA4BA,UAA5B,GAAyCzB,GAAG,CAACiB,GAAJ,CAAQ,YAAY;AAAE,WAAOQ,UAAP;AAAoB,GAA1C,CAA3D;AACA,MAAIE,YAAY,GAAGlD,SAAS,CAACC,OAAD,EAAU,cAAV,EAA0B,CAA1B,CAA5B;AACA,MAAIkD,SAAS,GAAGnD,SAAS,CAACC,OAAD,EAAU,WAAV,EAAuBnB,UAAvB,CAAzB;AACA,MAAIsE,MAAM,GAAGpD,SAAS,CAClBC,OADkB,EAElB,QAFkB,EAGlBkD,SAAS,KAAKrE,UAAd,GAA2B,YAA3B,GAA0C,YAHxB,CAAtB;AAKA,MAAIuE,MAAM,GAAGrD,SAAS,CAACC,OAAD,EAAU,QAAV,EAAoBS,eAApB,CAAtB;AACA,MAAI4C,YAAY,GAAGtD,SAAS,CACxBC,OADwB,EAExB,cAFwB,EAGxBc,qBAHwB,CAA5B;AAKA,MAAIwC,WAAW,GAAGvD,SAAS,CAACC,OAAD,EAAU,aAAV,EAAyBkB,oBAAzB,CAA3B,CAvDsC,CAyDtC;AACA;AACA;;AACA,MAAIgC,SAAS,KAAKrE,UAAlB,EAA8B;AAC1B0C,IAAAA,SAAS,GAAG,OAAZ;AACAC,IAAAA,UAAU,GAAG,SAAb;AACAC,IAAAA,QAAQ,GAAG,MAAX;AACAC,IAAAA,WAAW,GAAG,OAAd;AACAC,IAAAA,UAAU,GAAG,aAAb;AACH,GAND,MAMO,IAAIuB,SAAS,KAAK,UAAlB,EAA8B;AACjC3B,IAAAA,SAAS,GAAG,QAAZ;AACAC,IAAAA,UAAU,GAAG,SAAb;AACAC,IAAAA,QAAQ,GAAG,KAAX;AACAC,IAAAA,WAAW,GAAG,QAAd;AACAC,IAAAA,UAAU,GAAG,cAAb;AACH,GAxEqC,CA0EtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,WAAS4B,cAAT,CAAwBrE,EAAxB,EAA4B8B,IAA5B,EAAkCC,OAAlC,EAA2CP,CAA3C,EAA8C;AAC1C;AACA;AACA;AACA;AACA,QAAItB,KAAK,GAAGiE,YAAY,CAAC9B,SAAD,EAAYP,IAAZ,EAAkBC,OAAlB,EAA2BP,CAA3B,CAAxB;AAEA8C,IAAAA,MAAM,CAACC,IAAP,CAAYrE,KAAZ,EAAmBsE,OAAnB,CAA2B,UAAUC,IAAV,EAAgB;AACvC;AACAzE,MAAAA,EAAE,CAACE,KAAH,CAASuE,IAAT,IAAiBvE,KAAK,CAACuE,IAAD,CAAtB;AACH,KAHD;AAIH;;AAED,WAASC,aAAT,CAAuBC,aAAvB,EAAsC5C,OAAtC,EAA+CP,CAA/C,EAAkD;AAC9C,QAAItB,KAAK,GAAGkE,WAAW,CAAC/B,SAAD,EAAYN,OAAZ,EAAqBP,CAArB,CAAvB;AAEA8C,IAAAA,MAAM,CAACC,IAAP,CAAYrE,KAAZ,EAAmBsE,OAAnB,CAA2B,UAAUC,IAAV,EAAgB;AACvC;AACAE,MAAAA,aAAa,CAACzE,KAAd,CAAoBuE,IAApB,IAA4BvE,KAAK,CAACuE,IAAD,CAAjC;AACH,KAHD;AAIH;;AAED,WAASG,QAAT,GAAoB;AAChB,WAAOlC,QAAQ,CAACW,GAAT,CAAa,UAAUwB,OAAV,EAAmB;AAAE,aAAOA,OAAO,CAAC/C,IAAf;AAAsB,KAAxD,CAAP;AACH,GA7GqC,CA+GtC;AACA;;;AACA,WAASgD,gBAAT,CAA0BC,CAA1B,EAA6B;AACzB,QAAI,aAAaA,CAAjB,EAAoB;AAAE,aAAOA,CAAC,CAACC,OAAF,CAAU,CAAV,EAAa1C,UAAb,CAAP;AAAiC;;AACvD,WAAOyC,CAAC,CAACzC,UAAD,CAAR;AACH,GApHqC,CAsHtC;AACA;AACA;AACA;AACA;AACA;;;AACA,WAAS2C,MAAT,CAAgBC,MAAhB,EAAwB;AACpB,QAAIC,CAAC,GAAGzC,QAAQ,CAAC,KAAKyC,CAAN,CAAhB;AACA,QAAIC,CAAC,GAAG1C,QAAQ,CAAC,KAAK0C,CAAN,CAAhB;AACA,QAAIC,UAAU,GAAGF,CAAC,CAACrD,IAAF,GAASsD,CAAC,CAACtD,IAA5B;AAEAqD,IAAAA,CAAC,CAACrD,IAAF,GAAUoD,MAAM,GAAG,KAAKpD,IAAf,GAAuBuD,UAAhC;AACAD,IAAAA,CAAC,CAACtD,IAAF,GAASuD,UAAU,GAAIH,MAAM,GAAG,KAAKpD,IAAf,GAAuBuD,UAA7C;AAEAhB,IAAAA,cAAc,CAACc,CAAC,CAACN,OAAH,EAAYM,CAAC,CAACrD,IAAd,EAAoB,KAAKrC,WAAL,CAApB,EAAuC0F,CAAC,CAAC3D,CAAzC,CAAd;AACA6C,IAAAA,cAAc,CAACe,CAAC,CAACP,OAAH,EAAYO,CAAC,CAACtD,IAAd,EAAoB,KAAKpC,WAAL,CAApB,EAAuC0F,CAAC,CAAC5D,CAAzC,CAAd;AACH,GAtIqC,CAwItC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAAS8D,IAAT,CAAcP,CAAd,EAAiB;AACb,QAAIG,MAAJ;AACA,QAAIC,CAAC,GAAGzC,QAAQ,CAAC,KAAKyC,CAAN,CAAhB;AACA,QAAIC,CAAC,GAAG1C,QAAQ,CAAC,KAAK0C,CAAN,CAAhB;;AAEA,QAAI,CAAC,KAAKG,QAAV,EAAoB;AAAE;AAAQ,KALjB,CAOb;AACA;AACA;;;AACAL,IAAAA,MAAM,GACFJ,gBAAgB,CAACC,CAAD,CAAhB,GACA,KAAKS,KADL,IAEC,KAAK/F,WAAL,IAAoB,KAAKgG,UAF1B,CADJ;;AAKA,QAAI1B,YAAY,GAAG,CAAnB,EAAsB;AAClBmB,MAAAA,MAAM,GAAGQ,IAAI,CAACC,KAAL,CAAWT,MAAM,GAAGnB,YAApB,IAAoCA,YAA7C;AACH,KAjBY,CAmBb;AACA;AACA;;;AACA,QAAImB,MAAM,IAAIC,CAAC,CAAC7B,OAAF,GAAY6B,CAAC,CAACtB,UAAd,GAA2B,KAAKpE,WAAL,CAAzC,EAA4D;AACxDyF,MAAAA,MAAM,GAAGC,CAAC,CAAC7B,OAAF,GAAY,KAAK7D,WAAL,CAArB;AACH,KAFD,MAEO,IACHyF,MAAM,IACN,KAAKpD,IAAL,IAAasD,CAAC,CAAC9B,OAAF,GAAY8B,CAAC,CAACvB,UAAd,GAA2B,KAAKnE,WAAL,CAAxC,CAFG,EAGL;AACEwF,MAAAA,MAAM,GAAG,KAAKpD,IAAL,IAAasD,CAAC,CAAC9B,OAAF,GAAY,KAAK5D,WAAL,CAAzB,CAAT;AACH;;AAED,QAAIwF,MAAM,IAAIC,CAAC,CAAC1B,OAAF,GAAY0B,CAAC,CAACtB,UAAd,GAA2B,KAAKpE,WAAL,CAAzC,EAA4D;AACxDyF,MAAAA,MAAM,GAAGC,CAAC,CAAC1B,OAAF,GAAY,KAAKhE,WAAL,CAArB;AACH,KAFD,MAEO,IACHyF,MAAM,IACN,KAAKpD,IAAL,IAAasD,CAAC,CAAC3B,OAAF,GAAY2B,CAAC,CAACvB,UAAd,GAA2B,KAAKnE,WAAL,CAAxC,CAFG,EAGL;AACEwF,MAAAA,MAAM,GAAG,KAAKpD,IAAL,IAAasD,CAAC,CAAC3B,OAAF,GAAY,KAAK/D,WAAL,CAAzB,CAAT;AACH,KAtCY,CAwCb;;;AACAuF,IAAAA,MAAM,CAACW,IAAP,CAAY,IAAZ,EAAkBV,MAAlB,EAzCa,CA2Cb;AACA;;AACArE,IAAAA,SAAS,CAACC,OAAD,EAAU,QAAV,EAAoBlB,IAApB,CAAT,CAAmCgF,QAAQ,EAA3C;AACH,GApMqC,CAsMtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAASiB,cAAT,GAA0B;AACtB;AACA,QAAIV,CAAC,GAAGzC,QAAQ,CAAC,KAAKyC,CAAN,CAAR,CAAiBN,OAAzB;AACA,QAAIO,CAAC,GAAG1C,QAAQ,CAAC,KAAK0C,CAAN,CAAR,CAAiBP,OAAzB;AAEA,QAAIiB,OAAO,GAAGX,CAAC,CAAC5F,qBAAD,CAAD,EAAd;AACA,QAAIwG,OAAO,GAAGX,CAAC,CAAC7F,qBAAD,CAAD,EAAd;AAEA,SAAKuC,IAAL,GACIgE,OAAO,CAACzD,SAAD,CAAP,GACA0D,OAAO,CAAC1D,SAAD,CADP,GAEA,KAAK5C,WAAL,CAFA,GAGA,KAAKC,WAAL,CAJJ;AAKA,SAAK8F,KAAL,GAAaM,OAAO,CAACvD,QAAD,CAApB;AACA,SAAKyD,GAAL,GAAWF,OAAO,CAACtD,WAAD,CAAlB;AACH;;AAED,WAASyD,SAAT,CAAmBpB,OAAnB,EAA4B;AACxB;AACA;AACA,QAAI,CAAC5B,gBAAL,EAAuB;AAAE,aAAO,IAAP;AAAa;;AAEtC,QAAIiD,aAAa,GAAGjD,gBAAgB,CAAC4B,OAAD,CAApC;;AAEA,QAAI,CAACqB,aAAL,EAAoB;AAAE,aAAO,IAAP;AAAa;;AAEnC,QAAIpE,IAAI,GAAG+C,OAAO,CAACpC,UAAD,CAAlB;;AAEA,QAAIX,IAAI,KAAK,CAAb,EAAgB;AAAE,aAAO,IAAP;AAAa;;AAE/B,QAAIkC,SAAS,KAAKrE,UAAlB,EAA8B;AAC1BmC,MAAAA,IAAI,IACAqE,UAAU,CAACD,aAAa,CAACE,WAAf,CAAV,GACAD,UAAU,CAACD,aAAa,CAACG,YAAf,CAFd;AAGH,KAJD,MAIO;AACHvE,MAAAA,IAAI,IACAqE,UAAU,CAACD,aAAa,CAACI,UAAf,CAAV,GACAH,UAAU,CAACD,aAAa,CAACK,aAAf,CAFd;AAGH;;AAED,WAAOzE,IAAP;AACH,GA5PqC,CA8PtC;AACA;AACA;AACA;;;AACA,WAAS0E,SAAT,CAAmBC,WAAnB,EAAgC;AAC5B;AACA;AACA,QAAIC,UAAU,GAAGT,SAAS,CAACnD,MAAD,CAA1B;;AACA,QAAI4D,UAAU,KAAK,IAAnB,EAAyB;AACrB,aAAOD,WAAP;AACH;;AAED,QAAIlD,QAAQ,CAACoD,MAAT,CAAgB,UAAUxB,CAAV,EAAaC,CAAb,EAAgB;AAAE,aAAOD,CAAC,GAAGC,CAAX;AAAe,KAAjD,EAAmD,CAAnD,IAAwDsB,UAA5D,EAAwE;AACpE,aAAOD,WAAP;AACH,KAV2B,CAY5B;AACA;;;AACA,QAAIG,YAAY,GAAG,CAAnB;AACA,QAAIC,OAAO,GAAG,EAAd;AAEA,QAAIC,UAAU,GAAGL,WAAW,CAACpD,GAAZ,CAAgB,UAAUvB,IAAV,EAAgBN,CAAhB,EAAmB;AAChD;AACA,UAAIuF,SAAS,GAAIL,UAAU,GAAG5E,IAAd,GAAsB,GAAtC;AACA,UAAIkF,iBAAiB,GAAG9F,aAAa,CACjCC,UADiC,EAEjCK,CAAC,KAAK,CAF2B,EAGjCA,CAAC,KAAKiF,WAAW,CAACrG,MAAZ,GAAqB,CAHM,EAIjCkB,WAJiC,CAArC;AAMA,UAAI2F,cAAc,GAAG1D,QAAQ,CAAC/B,CAAD,CAAR,GAAcwF,iBAAnC,CATgD,CAWhD;AACA;;AACA,UAAID,SAAS,GAAGE,cAAhB,EAAgC;AAC5BL,QAAAA,YAAY,IAAIK,cAAc,GAAGF,SAAjC;AACAF,QAAAA,OAAO,CAACK,IAAR,CAAa,CAAb;AACA,eAAOD,cAAP;AACH,OAjB+C,CAmBhD;;;AACAJ,MAAAA,OAAO,CAACK,IAAR,CAAaH,SAAS,GAAGE,cAAzB;AACA,aAAOF,SAAP;AACH,KAtBgB,CAAjB,CAjB4B,CAyC5B;;AACA,QAAIH,YAAY,KAAK,CAArB,EAAwB;AACpB,aAAOH,WAAP;AACH;;AAED,WAAOK,UAAU,CAACzD,GAAX,CAAe,UAAU0D,SAAV,EAAqBvF,CAArB,EAAwB;AAC1C,UAAI2F,YAAY,GAAGJ,SAAnB,CAD0C,CAG1C;AACA;;AACA,UAAIH,YAAY,GAAG,CAAf,IAAoBC,OAAO,CAACrF,CAAD,CAAP,GAAaoF,YAAb,GAA4B,CAApD,EAAuD;AACnD,YAAIQ,WAAW,GAAG1B,IAAI,CAAC2B,GAAL,CACdT,YADc,EAEdC,OAAO,CAACrF,CAAD,CAAP,GAAaoF,YAFC,CAAlB,CADmD,CAMnD;;AACAA,QAAAA,YAAY,IAAIQ,WAAhB;AACAD,QAAAA,YAAY,GAAGJ,SAAS,GAAGK,WAA3B;AACH,OAdyC,CAgB1C;;;AACA,aAAQD,YAAY,GAAGT,UAAhB,GAA8B,GAArC;AACH,KAlBM,CAAP;AAmBH,GAnUqC,CAqUtC;;;AACA,WAASY,YAAT,GAAwB;AACpB,QAAIC,IAAI,GAAG,IAAX;AACA,QAAIpC,CAAC,GAAGzC,QAAQ,CAAC6E,IAAI,CAACpC,CAAN,CAAR,CAAiBN,OAAzB;AACA,QAAIO,CAAC,GAAG1C,QAAQ,CAAC6E,IAAI,CAACnC,CAAN,CAAR,CAAiBP,OAAzB;;AAEA,QAAI0C,IAAI,CAAChC,QAAT,EAAmB;AACf1E,MAAAA,SAAS,CAACC,OAAD,EAAU,WAAV,EAAuBlB,IAAvB,CAAT,CAAsCgF,QAAQ,EAA9C;AACH;;AAED2C,IAAAA,IAAI,CAAChC,QAAL,GAAgB,KAAhB,CAToB,CAWpB;;AACAvG,IAAAA,MAAM,CAACM,mBAAD,CAAN,CAA4B,SAA5B,EAAuCiI,IAAI,CAACC,IAA5C;AACAxI,IAAAA,MAAM,CAACM,mBAAD,CAAN,CAA4B,UAA5B,EAAwCiI,IAAI,CAACC,IAA7C;AACAxI,IAAAA,MAAM,CAACM,mBAAD,CAAN,CAA4B,aAA5B,EAA2CiI,IAAI,CAACC,IAAhD;AACAxI,IAAAA,MAAM,CAACM,mBAAD,CAAN,CAA4B,WAA5B,EAAyCiI,IAAI,CAACE,IAA9C;AACAzI,IAAAA,MAAM,CAACM,mBAAD,CAAN,CAA4B,WAA5B,EAAyCiI,IAAI,CAACE,IAA9C,EAhBoB,CAkBpB;;AACAF,IAAAA,IAAI,CAACC,IAAL,GAAY,IAAZ;AACAD,IAAAA,IAAI,CAACE,IAAL,GAAY,IAAZ;AAEAtC,IAAAA,CAAC,CAAC7F,mBAAD,CAAD,CAAuB,aAAvB,EAAsCM,IAAtC;AACAuF,IAAAA,CAAC,CAAC7F,mBAAD,CAAD,CAAuB,WAAvB,EAAoCM,IAApC;AACAwF,IAAAA,CAAC,CAAC9F,mBAAD,CAAD,CAAuB,aAAvB,EAAsCM,IAAtC;AACAwF,IAAAA,CAAC,CAAC9F,mBAAD,CAAD,CAAuB,WAAvB,EAAoCM,IAApC;AAEAuF,IAAAA,CAAC,CAACjF,KAAF,CAAQwH,UAAR,GAAqB,EAArB;AACAvC,IAAAA,CAAC,CAACjF,KAAF,CAAQyH,gBAAR,GAA2B,EAA3B;AACAxC,IAAAA,CAAC,CAACjF,KAAF,CAAQ0H,aAAR,GAAwB,EAAxB;AACAzC,IAAAA,CAAC,CAACjF,KAAF,CAAQ2H,aAAR,GAAwB,EAAxB;AAEAzC,IAAAA,CAAC,CAAClF,KAAF,CAAQwH,UAAR,GAAqB,EAArB;AACAtC,IAAAA,CAAC,CAAClF,KAAF,CAAQyH,gBAAR,GAA2B,EAA3B;AACAvC,IAAAA,CAAC,CAAClF,KAAF,CAAQ0H,aAAR,GAAwB,EAAxB;AACAxC,IAAAA,CAAC,CAAClF,KAAF,CAAQ2H,aAAR,GAAwB,EAAxB;AAEAN,IAAAA,IAAI,CAACrD,MAAL,CAAYhE,KAAZ,CAAkB+D,MAAlB,GAA2B,EAA3B;AACAsD,IAAAA,IAAI,CAACzE,MAAL,CAAY5C,KAAZ,CAAkB+D,MAAlB,GAA2B,EAA3B;AACA9E,IAAAA,QAAQ,CAAC2I,IAAT,CAAc5H,KAAd,CAAoB+D,MAApB,GAA6B,EAA7B;AACH,GA9WqC,CAgXtC;AACA;AACA;;;AACA,WAAS8D,aAAT,CAAuBhD,CAAvB,EAA0B;AACtB;AACA,QAAI,YAAYA,CAAZ,IAAiBA,CAAC,CAACiD,MAAF,KAAa,CAAlC,EAAqC;AACjC;AACH,KAJqB,CAMtB;;;AACA,QAAIT,IAAI,GAAG,IAAX;AACA,QAAIpC,CAAC,GAAGzC,QAAQ,CAAC6E,IAAI,CAACpC,CAAN,CAAR,CAAiBN,OAAzB;AACA,QAAIO,CAAC,GAAG1C,QAAQ,CAAC6E,IAAI,CAACnC,CAAN,CAAR,CAAiBP,OAAzB,CATsB,CAWtB;;AACA,QAAI,CAAC0C,IAAI,CAAChC,QAAV,EAAoB;AAChB1E,MAAAA,SAAS,CAACC,OAAD,EAAU,aAAV,EAAyBlB,IAAzB,CAAT,CAAwCgF,QAAQ,EAAhD;AACH,KAdqB,CAgBtB;;;AACAG,IAAAA,CAAC,CAACkD,cAAF,GAjBsB,CAmBtB;;AACAV,IAAAA,IAAI,CAAChC,QAAL,GAAgB,IAAhB,CApBsB,CAsBtB;AACA;;AACAgC,IAAAA,IAAI,CAACE,IAAL,GAAYnC,IAAI,CAAC4C,IAAL,CAAUX,IAAV,CAAZ;AACAA,IAAAA,IAAI,CAACC,IAAL,GAAYF,YAAY,CAACY,IAAb,CAAkBX,IAAlB,CAAZ,CAzBsB,CA2BtB;;AACAvI,IAAAA,MAAM,CAACK,gBAAD,CAAN,CAAyB,SAAzB,EAAoCkI,IAAI,CAACC,IAAzC;AACAxI,IAAAA,MAAM,CAACK,gBAAD,CAAN,CAAyB,UAAzB,EAAqCkI,IAAI,CAACC,IAA1C;AACAxI,IAAAA,MAAM,CAACK,gBAAD,CAAN,CAAyB,aAAzB,EAAwCkI,IAAI,CAACC,IAA7C;AACAxI,IAAAA,MAAM,CAACK,gBAAD,CAAN,CAAyB,WAAzB,EAAsCkI,IAAI,CAACE,IAA3C;AACAzI,IAAAA,MAAM,CAACK,gBAAD,CAAN,CAAyB,WAAzB,EAAsCkI,IAAI,CAACE,IAA3C,EAhCsB,CAkCtB;;AACAtC,IAAAA,CAAC,CAAC9F,gBAAD,CAAD,CAAoB,aAApB,EAAmCO,IAAnC;AACAuF,IAAAA,CAAC,CAAC9F,gBAAD,CAAD,CAAoB,WAApB,EAAiCO,IAAjC;AACAwF,IAAAA,CAAC,CAAC/F,gBAAD,CAAD,CAAoB,aAApB,EAAmCO,IAAnC;AACAwF,IAAAA,CAAC,CAAC/F,gBAAD,CAAD,CAAoB,WAApB,EAAiCO,IAAjC;AAEAuF,IAAAA,CAAC,CAACjF,KAAF,CAAQwH,UAAR,GAAqB,MAArB;AACAvC,IAAAA,CAAC,CAACjF,KAAF,CAAQyH,gBAAR,GAA2B,MAA3B;AACAxC,IAAAA,CAAC,CAACjF,KAAF,CAAQ0H,aAAR,GAAwB,MAAxB;AACAzC,IAAAA,CAAC,CAACjF,KAAF,CAAQ2H,aAAR,GAAwB,MAAxB;AAEAzC,IAAAA,CAAC,CAAClF,KAAF,CAAQwH,UAAR,GAAqB,MAArB;AACAtC,IAAAA,CAAC,CAAClF,KAAF,CAAQyH,gBAAR,GAA2B,MAA3B;AACAvC,IAAAA,CAAC,CAAClF,KAAF,CAAQ0H,aAAR,GAAwB,MAAxB;AACAxC,IAAAA,CAAC,CAAClF,KAAF,CAAQ2H,aAAR,GAAwB,MAAxB,CAhDsB,CAkDtB;;AACAN,IAAAA,IAAI,CAACrD,MAAL,CAAYhE,KAAZ,CAAkB+D,MAAlB,GAA2BA,MAA3B;AACAsD,IAAAA,IAAI,CAACzE,MAAL,CAAY5C,KAAZ,CAAkB+D,MAAlB,GAA2BA,MAA3B;AACA9E,IAAAA,QAAQ,CAAC2I,IAAT,CAAc5H,KAAd,CAAoB+D,MAApB,GAA6BA,MAA7B,CArDsB,CAuDtB;;AACA4B,IAAAA,cAAc,CAACD,IAAf,CAAoB2B,IAApB,EAxDsB,CA0DtB;;AACAA,IAAAA,IAAI,CAAC9B,UAAL,GAAkBX,gBAAgB,CAACC,CAAD,CAAhB,GAAsBwC,IAAI,CAACvB,GAA7C;AACH,GA/aqC,CAibtC;;;AACA5C,EAAAA,KAAK,GAAGoD,SAAS,CAACpD,KAAD,CAAjB,CAlbsC,CAobtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAI+E,KAAK,GAAG,EAAZ;AACAzF,EAAAA,QAAQ,GAAGN,GAAG,CAACiB,GAAJ,CAAQ,UAAU+E,EAAV,EAAc5G,CAAd,EAAiB;AAChC;AACA,QAAIqD,OAAO,GAAG;AACVA,MAAAA,OAAO,EAAEpE,iBAAiB,CAAC2H,EAAD,CADhB;AAEVtG,MAAAA,IAAI,EAAEsB,KAAK,CAAC5B,CAAD,CAFD;AAGV8B,MAAAA,OAAO,EAAEC,QAAQ,CAAC/B,CAAD,CAHP;AAIViC,MAAAA,OAAO,EAAEE,QAAQ,CAACnC,CAAD,CAJP;AAKVqC,MAAAA,UAAU,EAAEC,WAAW,CAACtC,CAAD,CALb;AAMVA,MAAAA,CAAC,EAAEA;AANO,KAAd;AASA,QAAI6G,IAAJ;;AAEA,QAAI7G,CAAC,GAAG,CAAR,EAAW;AACP;AACA6G,MAAAA,IAAI,GAAG;AACHlD,QAAAA,CAAC,EAAE3D,CAAC,GAAG,CADJ;AAEH4D,QAAAA,CAAC,EAAE5D,CAFA;AAGH+D,QAAAA,QAAQ,EAAE,KAHP;AAIHvB,QAAAA,SAAS,EAAEA,SAJR;AAKHlB,QAAAA,MAAM,EAAEA;AALL,OAAP;AAQAuF,MAAAA,IAAI,CAAC5I,WAAD,CAAJ,GAAoByB,aAAa,CAC7BC,UAD6B,EAE7BK,CAAC,GAAG,CAAJ,KAAU,CAFmB,EAG7B,KAH6B,EAI7BF,WAJ6B,CAAjC;AAMA+G,MAAAA,IAAI,CAAC3I,WAAD,CAAJ,GAAoBwB,aAAa,CAC7BC,UAD6B,EAE7B,KAF6B,EAG7BK,CAAC,KAAKY,GAAG,CAAChC,MAAJ,GAAa,CAHU,EAI7BkB,WAJ6B,CAAjC,CAhBO,CAuBP;;AACA,UACI4B,mBAAmB,KAAK,aAAxB,IACAA,mBAAmB,KAAK,gBAF5B,EAGE;AACE,YAAIoF,IAAI,GAAGD,IAAI,CAAClD,CAAhB;AACAkD,QAAAA,IAAI,CAAClD,CAAL,GAASkD,IAAI,CAACjD,CAAd;AACAiD,QAAAA,IAAI,CAACjD,CAAL,GAASkD,IAAT;AACH;AACJ,KA7C+B,CA+ChC;AACA;AACA;AACA;AACA;;;AACA,QAAI9G,CAAC,GAAG,CAAR,EAAW;AACP,UAAImD,aAAa,GAAGT,MAAM,CAAC1C,CAAD,EAAIwC,SAAJ,EAAea,OAAO,CAACA,OAAvB,CAA1B;AACAH,MAAAA,aAAa,CAACC,aAAD,EAAgBxD,UAAhB,EAA4BK,CAA5B,CAAb,CAFO,CAIP;;AACA6G,MAAAA,IAAI,CAAC7I,mBAAD,CAAJ,GAA4BuI,aAAa,CAACG,IAAd,CAAmBG,IAAnB,CAA5B,CALO,CAOP;;AACA1D,MAAAA,aAAa,CAACtF,gBAAD,CAAb,CACI,WADJ,EAEIgJ,IAAI,CAAC7I,mBAAD,CAFR;AAIAmF,MAAAA,aAAa,CAACtF,gBAAD,CAAb,CACI,YADJ,EAEIgJ,IAAI,CAAC7I,mBAAD,CAFR;AAKAsD,MAAAA,MAAM,CAACyF,YAAP,CAAoB5D,aAApB,EAAmCE,OAAO,CAACA,OAA3C;AAEAwD,MAAAA,IAAI,CAACnE,MAAL,GAAcS,aAAd;AACH;;AAEDN,IAAAA,cAAc,CACVQ,OAAO,CAACA,OADE,EAEVA,OAAO,CAAC/C,IAFE,EAGVZ,aAAa,CACTC,UADS,EAETK,CAAC,KAAK,CAFG,EAGTA,CAAC,KAAKY,GAAG,CAAChC,MAAJ,GAAa,CAHV,EAITkB,WAJS,CAHH,EASVE,CATU,CAAd,CA1EgC,CAsFhC;AACA;;AACA,QAAIA,CAAC,GAAG,CAAR,EAAW;AACP2G,MAAAA,KAAK,CAACjB,IAAN,CAAWmB,IAAX;AACH;;AAED,WAAOxD,OAAP;AACH,GA7FU,CAAX;;AA+FA,WAAS2D,WAAT,CAAqB3D,OAArB,EAA8B;AAC1B,QAAIxD,MAAM,GAAGwD,OAAO,CAACrD,CAAR,KAAc2G,KAAK,CAAC/H,MAAjC;AACA,QAAIiI,IAAI,GAAGhH,MAAM,GAAG8G,KAAK,CAACtD,OAAO,CAACrD,CAAR,GAAY,CAAb,CAAR,GAA0B2G,KAAK,CAACtD,OAAO,CAACrD,CAAT,CAAhD;AAEAqE,IAAAA,cAAc,CAACD,IAAf,CAAoByC,IAApB;AAEA,QAAIvG,IAAI,GAAGT,MAAM,GACXgH,IAAI,CAACvG,IAAL,GAAY+C,OAAO,CAACvB,OAApB,GAA8B+E,IAAI,CAAC3I,WAAD,CADvB,GAEXmF,OAAO,CAACvB,OAAR,GAAkB+E,IAAI,CAAC5I,WAAD,CAF5B;AAIAwF,IAAAA,MAAM,CAACW,IAAP,CAAYyC,IAAZ,EAAkBvG,IAAlB;AACH;;AAEDY,EAAAA,QAAQ,CAAC8B,OAAT,CAAiB,UAAUK,OAAV,EAAmB;AAChC,QAAI4D,YAAY,GAAG5D,OAAO,CAACA,OAAR,CAAgBtF,qBAAhB,IAAyC8C,SAAzC,CAAnB;;AAEA,QAAIoG,YAAY,GAAG5D,OAAO,CAACvB,OAA3B,EAAoC;AAChC,UAAIM,WAAJ,EAAiB;AACb4E,QAAAA,WAAW,CAAC3D,OAAD,CAAX;AACH,OAFD,MAEO;AACH;AACAA,QAAAA,OAAO,CAACvB,OAAR,GAAkBmF,YAAlB;AACH;AACJ;AACJ,GAXD;;AAaA,WAASC,QAAT,CAAkBC,QAAlB,EAA4B;AACxB,QAAIC,OAAO,GAAGpC,SAAS,CAACmC,QAAD,CAAvB;AACAC,IAAAA,OAAO,CAACpE,OAAR,CAAgB,UAAUqE,OAAV,EAAmBrH,CAAnB,EAAsB;AAClC,UAAIA,CAAC,GAAG,CAAR,EAAW;AACP,YAAI6G,IAAI,GAAGF,KAAK,CAAC3G,CAAC,GAAG,CAAL,CAAhB;AAEA,YAAI2D,CAAC,GAAGzC,QAAQ,CAAC2F,IAAI,CAAClD,CAAN,CAAhB;AACA,YAAIC,CAAC,GAAG1C,QAAQ,CAAC2F,IAAI,CAACjD,CAAN,CAAhB;AAEAD,QAAAA,CAAC,CAACrD,IAAF,GAAS8G,OAAO,CAACpH,CAAC,GAAG,CAAL,CAAhB;AACA4D,QAAAA,CAAC,CAACtD,IAAF,GAAS+G,OAAT;AAEAxE,QAAAA,cAAc,CAACc,CAAC,CAACN,OAAH,EAAYM,CAAC,CAACrD,IAAd,EAAoBuG,IAAI,CAAC5I,WAAD,CAAxB,EAAuC0F,CAAC,CAAC3D,CAAzC,CAAd;AACA6C,QAAAA,cAAc,CAACe,CAAC,CAACP,OAAH,EAAYO,CAAC,CAACtD,IAAd,EAAoBuG,IAAI,CAAC3I,WAAD,CAAxB,EAAuC0F,CAAC,CAAC5D,CAAzC,CAAd;AACH;AACJ,KAbD;AAcH;;AAED,WAASsH,OAAT,CAAiBC,cAAjB,EAAiCC,cAAjC,EAAiD;AAC7Cb,IAAAA,KAAK,CAAC3D,OAAN,CAAc,UAAU6D,IAAV,EAAgB;AAC1B,UAAIW,cAAc,KAAK,IAAvB,EAA6B;AACzBX,QAAAA,IAAI,CAACvF,MAAL,CAAYmG,WAAZ,CAAwBZ,IAAI,CAACnE,MAA7B;AACH,OAFD,MAEO;AACHmE,QAAAA,IAAI,CAACnE,MAAL,CAAY5E,mBAAZ,EACI,WADJ,EAEI+I,IAAI,CAAC7I,mBAAD,CAFR;AAIA6I,QAAAA,IAAI,CAACnE,MAAL,CAAY5E,mBAAZ,EACI,YADJ,EAEI+I,IAAI,CAAC7I,mBAAD,CAFR;AAIH;;AAED,UAAIuJ,cAAc,KAAK,IAAvB,EAA6B;AACzB,YAAI7I,KAAK,GAAGiE,YAAY,CACpB9B,SADoB,EAEpBgG,IAAI,CAAClD,CAAL,CAAOrD,IAFa,EAGpBuG,IAAI,CAAC5I,WAAD,CAHgB,CAAxB;AAMA6E,QAAAA,MAAM,CAACC,IAAP,CAAYrE,KAAZ,EAAmBsE,OAAnB,CAA2B,UAAUC,IAAV,EAAgB;AACvC/B,UAAAA,QAAQ,CAAC2F,IAAI,CAAClD,CAAN,CAAR,CAAiBN,OAAjB,CAAyB3E,KAAzB,CAA+BuE,IAA/B,IAAuC,EAAvC;AACA/B,UAAAA,QAAQ,CAAC2F,IAAI,CAACjD,CAAN,CAAR,CAAiBP,OAAjB,CAAyB3E,KAAzB,CAA+BuE,IAA/B,IAAuC,EAAvC;AACH,SAHD;AAIH;AACJ,KA1BD;AA2BH;;AAED,SAAO;AACHiE,IAAAA,QAAQ,EAAEA,QADP;AAEH9D,IAAAA,QAAQ,EAAEA,QAFP;AAGHsE,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkB1H,CAAlB,EAAqB;AAC3BgH,MAAAA,WAAW,CAAC9F,QAAQ,CAAClB,CAAD,CAAT,CAAX;AACH,KALE;AAMHsH,IAAAA,OAAO,EAAEA,OANN;AAOHhG,IAAAA,MAAM,EAAEA,MAPL;AAQHqF,IAAAA,KAAK,EAAEA;AARJ,GAAP;AAUH,CA5nBD;;AA8nBA,eAAejG,KAAf","sourcesContent":["// The programming goals of Split.js are to deliver readable, understandable and\n// maintainable code, while at the same time manually optimizing for tiny minified file size,\n// browser compatibility without additional requirements\n// and very few assumptions about the user's page layout.\nvar global = typeof window !== 'undefined' ? window : null;\nvar ssr = global === null;\nvar document = !ssr ? global.document : undefined;\n\n// Save a couple long function names that are used frequently.\n// This optimization saves around 400 bytes.\nvar addEventListener = 'addEventListener';\nvar removeEventListener = 'removeEventListener';\nvar getBoundingClientRect = 'getBoundingClientRect';\nvar gutterStartDragging = '_a';\nvar aGutterSize = '_b';\nvar bGutterSize = '_c';\nvar HORIZONTAL = 'horizontal';\nvar NOOP = function () { return false; };\n\n// Helper function determines which prefixes of CSS calc we need.\n// We only need to do this once on startup, when this anonymous function is called.\n//\n// Tests -webkit, -moz and -o prefixes. Modified from StackOverflow:\n// http://stackoverflow.com/questions/16625140/js-feature-detection-to-detect-the-usage-of-webkit-calc-over-calc/16625167#16625167\nvar calc = ssr\n    ? 'calc'\n    : ((['', '-webkit-', '-moz-', '-o-']\n          .filter(function (prefix) {\n              var el = document.createElement('div');\n              el.style.cssText = \"width:\" + prefix + \"calc(9px)\";\n\n              return !!el.style.length\n          })\n          .shift()) + \"calc\");\n\n// Helper function checks if its argument is a string-like type\nvar isString = function (v) { return typeof v === 'string' || v instanceof String; };\n\n// Helper function allows elements and string selectors to be used\n// interchangeably. In either case an element is returned. This allows us to\n// do `Split([elem1, elem2])` as well as `Split(['#id1', '#id2'])`.\nvar elementOrSelector = function (el) {\n    if (isString(el)) {\n        var ele = document.querySelector(el);\n        if (!ele) {\n            throw new Error((\"Selector \" + el + \" did not match a DOM element\"))\n        }\n        return ele\n    }\n\n    return el\n};\n\n// Helper function gets a property from the properties object, with a default fallback\nvar getOption = function (options, propName, def) {\n    var value = options[propName];\n    if (value !== undefined) {\n        return value\n    }\n    return def\n};\n\nvar getGutterSize = function (gutterSize, isFirst, isLast, gutterAlign) {\n    if (isFirst) {\n        if (gutterAlign === 'end') {\n            return 0\n        }\n        if (gutterAlign === 'center') {\n            return gutterSize / 2\n        }\n    } else if (isLast) {\n        if (gutterAlign === 'start') {\n            return 0\n        }\n        if (gutterAlign === 'center') {\n            return gutterSize / 2\n        }\n    }\n\n    return gutterSize\n};\n\n// Default options\nvar defaultGutterFn = function (i, gutterDirection) {\n    var gut = document.createElement('div');\n    gut.className = \"gutter gutter-\" + gutterDirection;\n    return gut\n};\n\nvar defaultElementStyleFn = function (dim, size, gutSize) {\n    var style = {};\n\n    if (!isString(size)) {\n        style[dim] = calc + \"(\" + size + \"% - \" + gutSize + \"px)\";\n    } else {\n        style[dim] = size;\n    }\n\n    return style\n};\n\nvar defaultGutterStyleFn = function (dim, gutSize) {\n    var obj;\n\n    return (( obj = {}, obj[dim] = (gutSize + \"px\"), obj ));\n};\n\n// The main function to initialize a split. Split.js thinks about each pair\n// of elements as an independant pair. Dragging the gutter between two elements\n// only changes the dimensions of elements in that pair. This is key to understanding\n// how the following functions operate, since each function is bound to a pair.\n//\n// A pair object is shaped like this:\n//\n// {\n//     a: DOM element,\n//     b: DOM element,\n//     aMin: Number,\n//     bMin: Number,\n//     dragging: Boolean,\n//     parent: DOM element,\n//     direction: 'horizontal' | 'vertical'\n// }\n//\n// The basic sequence:\n//\n// 1. Set defaults to something sane. `options` doesn't have to be passed at all.\n// 2. Initialize a bunch of strings based on the direction we're splitting.\n//    A lot of the behavior in the rest of the library is paramatized down to\n//    rely on CSS strings and classes.\n// 3. Define the dragging helper functions, and a few helpers to go with them.\n// 4. Loop through the elements while pairing them off. Every pair gets an\n//    `pair` object and a gutter.\n// 5. Actually size the pair elements, insert gutters and attach event listeners.\nvar Split = function (idsOption, options) {\n    if ( options === void 0 ) options = {};\n\n    if (ssr) { return {} }\n\n    var ids = idsOption;\n    var dimension;\n    var clientAxis;\n    var position;\n    var positionEnd;\n    var clientSize;\n    var elements;\n\n    // Allow HTMLCollection to be used as an argument when supported\n    if (Array.from) {\n        ids = Array.from(ids);\n    }\n\n    // All DOM elements in the split should have a common parent. We can grab\n    // the first elements parent and hope users read the docs because the\n    // behavior will be whacky otherwise.\n    var firstElement = elementOrSelector(ids[0]);\n    var parent = firstElement.parentNode;\n    var parentStyle = getComputedStyle ? getComputedStyle(parent) : null;\n    var parentFlexDirection = parentStyle ? parentStyle.flexDirection : null;\n\n    // Set default options.sizes to equal percentages of the parent element.\n    var sizes = getOption(options, 'sizes') || ids.map(function () { return 100 / ids.length; });\n\n    // Standardize minSize and maxSize to an array if it isn't already.\n    // This allows minSize and maxSize to be passed as a number.\n    var minSize = getOption(options, 'minSize', 100);\n    var minSizes = Array.isArray(minSize) ? minSize : ids.map(function () { return minSize; });\n    var maxSize = getOption(options, 'maxSize', Infinity);\n    var maxSizes = Array.isArray(maxSize) ? maxSize : ids.map(function () { return maxSize; });\n\n    // Get other options\n    var expandToMin = getOption(options, 'expandToMin', false);\n    var gutterSize = getOption(options, 'gutterSize', 10);\n    var gutterAlign = getOption(options, 'gutterAlign', 'center');\n    var snapOffset = getOption(options, 'snapOffset', 30);\n    var snapOffsets = Array.isArray(snapOffset) ? snapOffset : ids.map(function () { return snapOffset; });\n    var dragInterval = getOption(options, 'dragInterval', 1);\n    var direction = getOption(options, 'direction', HORIZONTAL);\n    var cursor = getOption(\n        options,\n        'cursor',\n        direction === HORIZONTAL ? 'col-resize' : 'row-resize'\n    );\n    var gutter = getOption(options, 'gutter', defaultGutterFn);\n    var elementStyle = getOption(\n        options,\n        'elementStyle',\n        defaultElementStyleFn\n    );\n    var gutterStyle = getOption(options, 'gutterStyle', defaultGutterStyleFn);\n\n    // 2. Initialize a bunch of strings based on the direction we're splitting.\n    // A lot of the behavior in the rest of the library is paramatized down to\n    // rely on CSS strings and classes.\n    if (direction === HORIZONTAL) {\n        dimension = 'width';\n        clientAxis = 'clientX';\n        position = 'left';\n        positionEnd = 'right';\n        clientSize = 'clientWidth';\n    } else if (direction === 'vertical') {\n        dimension = 'height';\n        clientAxis = 'clientY';\n        position = 'top';\n        positionEnd = 'bottom';\n        clientSize = 'clientHeight';\n    }\n\n    // 3. Define the dragging helper functions, and a few helpers to go with them.\n    // Each helper is bound to a pair object that contains its metadata. This\n    // also makes it easy to store references to listeners that that will be\n    // added and removed.\n    //\n    // Even though there are no other functions contained in them, aliasing\n    // this to self saves 50 bytes or so since it's used so frequently.\n    //\n    // The pair object saves metadata like dragging state, position and\n    // event listener references.\n\n    function setElementSize(el, size, gutSize, i) {\n        // Split.js allows setting sizes via numbers (ideally), or if you must,\n        // by string, like '300px'. This is less than ideal, because it breaks\n        // the fluid layout that `calc(% - px)` provides. You're on your own if you do that,\n        // make sure you calculate the gutter size by hand.\n        var style = elementStyle(dimension, size, gutSize, i);\n\n        Object.keys(style).forEach(function (prop) {\n            // eslint-disable-next-line no-param-reassign\n            el.style[prop] = style[prop];\n        });\n    }\n\n    function setGutterSize(gutterElement, gutSize, i) {\n        var style = gutterStyle(dimension, gutSize, i);\n\n        Object.keys(style).forEach(function (prop) {\n            // eslint-disable-next-line no-param-reassign\n            gutterElement.style[prop] = style[prop];\n        });\n    }\n\n    function getSizes() {\n        return elements.map(function (element) { return element.size; })\n    }\n\n    // Supports touch events, but not multitouch, so only the first\n    // finger `touches[0]` is counted.\n    function getMousePosition(e) {\n        if ('touches' in e) { return e.touches[0][clientAxis] }\n        return e[clientAxis]\n    }\n\n    // Actually adjust the size of elements `a` and `b` to `offset` while dragging.\n    // calc is used to allow calc(percentage + gutterpx) on the whole split instance,\n    // which allows the viewport to be resized without additional logic.\n    // Element a's size is the same as offset. b's size is total size - a size.\n    // Both sizes are calculated from the initial parent percentage,\n    // then the gutter size is subtracted.\n    function adjust(offset) {\n        var a = elements[this.a];\n        var b = elements[this.b];\n        var percentage = a.size + b.size;\n\n        a.size = (offset / this.size) * percentage;\n        b.size = percentage - (offset / this.size) * percentage;\n\n        setElementSize(a.element, a.size, this[aGutterSize], a.i);\n        setElementSize(b.element, b.size, this[bGutterSize], b.i);\n    }\n\n    // drag, where all the magic happens. The logic is really quite simple:\n    //\n    // 1. Ignore if the pair is not dragging.\n    // 2. Get the offset of the event.\n    // 3. Snap offset to min if within snappable range (within min + snapOffset).\n    // 4. Actually adjust each element in the pair to offset.\n    //\n    // ---------------------------------------------------------------------\n    // |    | <- a.minSize               ||              b.minSize -> |    |\n    // |    |  | <- this.snapOffset      ||     this.snapOffset -> |  |    |\n    // |    |  |                         ||                        |  |    |\n    // |    |  |                         ||                        |  |    |\n    // ---------------------------------------------------------------------\n    // | <- this.start                                        this.size -> |\n    function drag(e) {\n        var offset;\n        var a = elements[this.a];\n        var b = elements[this.b];\n\n        if (!this.dragging) { return }\n\n        // Get the offset of the event from the first side of the\n        // pair `this.start`. Then offset by the initial position of the\n        // mouse compared to the gutter size.\n        offset =\n            getMousePosition(e) -\n            this.start +\n            (this[aGutterSize] - this.dragOffset);\n\n        if (dragInterval > 1) {\n            offset = Math.round(offset / dragInterval) * dragInterval;\n        }\n\n        // If within snapOffset of min or max, set offset to min or max.\n        // snapOffset buffers a.minSize and b.minSize, so logic is opposite for both.\n        // Include the appropriate gutter sizes to prevent overflows.\n        if (offset <= a.minSize + a.snapOffset + this[aGutterSize]) {\n            offset = a.minSize + this[aGutterSize];\n        } else if (\n            offset >=\n            this.size - (b.minSize + b.snapOffset + this[bGutterSize])\n        ) {\n            offset = this.size - (b.minSize + this[bGutterSize]);\n        }\n\n        if (offset >= a.maxSize - a.snapOffset + this[aGutterSize]) {\n            offset = a.maxSize + this[aGutterSize];\n        } else if (\n            offset <=\n            this.size - (b.maxSize - b.snapOffset + this[bGutterSize])\n        ) {\n            offset = this.size - (b.maxSize + this[bGutterSize]);\n        }\n\n        // Actually adjust the size.\n        adjust.call(this, offset);\n\n        // Call the drag callback continously. Don't do anything too intensive\n        // in this callback.\n        getOption(options, 'onDrag', NOOP)(getSizes());\n    }\n\n    // Cache some important sizes when drag starts, so we don't have to do that\n    // continously:\n    //\n    // `size`: The total size of the pair. First + second + first gutter + second gutter.\n    // `start`: The leading side of the first element.\n    //\n    // ------------------------------------------------\n    // |      aGutterSize -> |||                      |\n    // |                     |||                      |\n    // |                     |||                      |\n    // |                     ||| <- bGutterSize       |\n    // ------------------------------------------------\n    // | <- start                             size -> |\n    function calculateSizes() {\n        // Figure out the parent size minus padding.\n        var a = elements[this.a].element;\n        var b = elements[this.b].element;\n\n        var aBounds = a[getBoundingClientRect]();\n        var bBounds = b[getBoundingClientRect]();\n\n        this.size =\n            aBounds[dimension] +\n            bBounds[dimension] +\n            this[aGutterSize] +\n            this[bGutterSize];\n        this.start = aBounds[position];\n        this.end = aBounds[positionEnd];\n    }\n\n    function innerSize(element) {\n        // Return nothing if getComputedStyle is not supported (< IE9)\n        // Or if parent element has no layout yet\n        if (!getComputedStyle) { return null }\n\n        var computedStyle = getComputedStyle(element);\n\n        if (!computedStyle) { return null }\n\n        var size = element[clientSize];\n\n        if (size === 0) { return null }\n\n        if (direction === HORIZONTAL) {\n            size -=\n                parseFloat(computedStyle.paddingLeft) +\n                parseFloat(computedStyle.paddingRight);\n        } else {\n            size -=\n                parseFloat(computedStyle.paddingTop) +\n                parseFloat(computedStyle.paddingBottom);\n        }\n\n        return size\n    }\n\n    // When specifying percentage sizes that are less than the computed\n    // size of the element minus the gutter, the lesser percentages must be increased\n    // (and decreased from the other elements) to make space for the pixels\n    // subtracted by the gutters.\n    function trimToMin(sizesToTrim) {\n        // Try to get inner size of parent element.\n        // If it's no supported, return original sizes.\n        var parentSize = innerSize(parent);\n        if (parentSize === null) {\n            return sizesToTrim\n        }\n\n        if (minSizes.reduce(function (a, b) { return a + b; }, 0) > parentSize) {\n            return sizesToTrim\n        }\n\n        // Keep track of the excess pixels, the amount of pixels over the desired percentage\n        // Also keep track of the elements with pixels to spare, to decrease after if needed\n        var excessPixels = 0;\n        var toSpare = [];\n\n        var pixelSizes = sizesToTrim.map(function (size, i) {\n            // Convert requested percentages to pixel sizes\n            var pixelSize = (parentSize * size) / 100;\n            var elementGutterSize = getGutterSize(\n                gutterSize,\n                i === 0,\n                i === sizesToTrim.length - 1,\n                gutterAlign\n            );\n            var elementMinSize = minSizes[i] + elementGutterSize;\n\n            // If element is too smal, increase excess pixels by the difference\n            // and mark that it has no pixels to spare\n            if (pixelSize < elementMinSize) {\n                excessPixels += elementMinSize - pixelSize;\n                toSpare.push(0);\n                return elementMinSize\n            }\n\n            // Otherwise, mark the pixels it has to spare and return it's original size\n            toSpare.push(pixelSize - elementMinSize);\n            return pixelSize\n        });\n\n        // If nothing was adjusted, return the original sizes\n        if (excessPixels === 0) {\n            return sizesToTrim\n        }\n\n        return pixelSizes.map(function (pixelSize, i) {\n            var newPixelSize = pixelSize;\n\n            // While there's still pixels to take, and there's enough pixels to spare,\n            // take as many as possible up to the total excess pixels\n            if (excessPixels > 0 && toSpare[i] - excessPixels > 0) {\n                var takenPixels = Math.min(\n                    excessPixels,\n                    toSpare[i] - excessPixels\n                );\n\n                // Subtract the amount taken for the next iteration\n                excessPixels -= takenPixels;\n                newPixelSize = pixelSize - takenPixels;\n            }\n\n            // Return the pixel size adjusted as a percentage\n            return (newPixelSize / parentSize) * 100\n        })\n    }\n\n    // stopDragging is very similar to startDragging in reverse.\n    function stopDragging() {\n        var self = this;\n        var a = elements[self.a].element;\n        var b = elements[self.b].element;\n\n        if (self.dragging) {\n            getOption(options, 'onDragEnd', NOOP)(getSizes());\n        }\n\n        self.dragging = false;\n\n        // Remove the stored event listeners. This is why we store them.\n        global[removeEventListener]('mouseup', self.stop);\n        global[removeEventListener]('touchend', self.stop);\n        global[removeEventListener]('touchcancel', self.stop);\n        global[removeEventListener]('mousemove', self.move);\n        global[removeEventListener]('touchmove', self.move);\n\n        // Clear bound function references\n        self.stop = null;\n        self.move = null;\n\n        a[removeEventListener]('selectstart', NOOP);\n        a[removeEventListener]('dragstart', NOOP);\n        b[removeEventListener]('selectstart', NOOP);\n        b[removeEventListener]('dragstart', NOOP);\n\n        a.style.userSelect = '';\n        a.style.webkitUserSelect = '';\n        a.style.MozUserSelect = '';\n        a.style.pointerEvents = '';\n\n        b.style.userSelect = '';\n        b.style.webkitUserSelect = '';\n        b.style.MozUserSelect = '';\n        b.style.pointerEvents = '';\n\n        self.gutter.style.cursor = '';\n        self.parent.style.cursor = '';\n        document.body.style.cursor = '';\n    }\n\n    // startDragging calls `calculateSizes` to store the inital size in the pair object.\n    // It also adds event listeners for mouse/touch events,\n    // and prevents selection while dragging so avoid the selecting text.\n    function startDragging(e) {\n        // Right-clicking can't start dragging.\n        if ('button' in e && e.button !== 0) {\n            return\n        }\n\n        // Alias frequently used variables to save space. 200 bytes.\n        var self = this;\n        var a = elements[self.a].element;\n        var b = elements[self.b].element;\n\n        // Call the onDragStart callback.\n        if (!self.dragging) {\n            getOption(options, 'onDragStart', NOOP)(getSizes());\n        }\n\n        // Don't actually drag the element. We emulate that in the drag function.\n        e.preventDefault();\n\n        // Set the dragging property of the pair object.\n        self.dragging = true;\n\n        // Create two event listeners bound to the same pair object and store\n        // them in the pair object.\n        self.move = drag.bind(self);\n        self.stop = stopDragging.bind(self);\n\n        // All the binding. `window` gets the stop events in case we drag out of the elements.\n        global[addEventListener]('mouseup', self.stop);\n        global[addEventListener]('touchend', self.stop);\n        global[addEventListener]('touchcancel', self.stop);\n        global[addEventListener]('mousemove', self.move);\n        global[addEventListener]('touchmove', self.move);\n\n        // Disable selection. Disable!\n        a[addEventListener]('selectstart', NOOP);\n        a[addEventListener]('dragstart', NOOP);\n        b[addEventListener]('selectstart', NOOP);\n        b[addEventListener]('dragstart', NOOP);\n\n        a.style.userSelect = 'none';\n        a.style.webkitUserSelect = 'none';\n        a.style.MozUserSelect = 'none';\n        a.style.pointerEvents = 'none';\n\n        b.style.userSelect = 'none';\n        b.style.webkitUserSelect = 'none';\n        b.style.MozUserSelect = 'none';\n        b.style.pointerEvents = 'none';\n\n        // Set the cursor at multiple levels\n        self.gutter.style.cursor = cursor;\n        self.parent.style.cursor = cursor;\n        document.body.style.cursor = cursor;\n\n        // Cache the initial sizes of the pair.\n        calculateSizes.call(self);\n\n        // Determine the position of the mouse compared to the gutter\n        self.dragOffset = getMousePosition(e) - self.end;\n    }\n\n    // adjust sizes to ensure percentage is within min size and gutter.\n    sizes = trimToMin(sizes);\n\n    // 5. Create pair and element objects. Each pair has an index reference to\n    // elements `a` and `b` of the pair (first and second elements).\n    // Loop through the elements while pairing them off. Every pair gets a\n    // `pair` object and a gutter.\n    //\n    // Basic logic:\n    //\n    // - Starting with the second element `i > 0`, create `pair` objects with\n    //   `a = i - 1` and `b = i`\n    // - Set gutter sizes based on the _pair_ being first/last. The first and last\n    //   pair have gutterSize / 2, since they only have one half gutter, and not two.\n    // - Create gutter elements and add event listeners.\n    // - Set the size of the elements, minus the gutter sizes.\n    //\n    // -----------------------------------------------------------------------\n    // |     i=0     |         i=1         |        i=2       |      i=3     |\n    // |             |                     |                  |              |\n    // |           pair 0                pair 1             pair 2           |\n    // |             |                     |                  |              |\n    // -----------------------------------------------------------------------\n    var pairs = [];\n    elements = ids.map(function (id, i) {\n        // Create the element object.\n        var element = {\n            element: elementOrSelector(id),\n            size: sizes[i],\n            minSize: minSizes[i],\n            maxSize: maxSizes[i],\n            snapOffset: snapOffsets[i],\n            i: i,\n        };\n\n        var pair;\n\n        if (i > 0) {\n            // Create the pair object with its metadata.\n            pair = {\n                a: i - 1,\n                b: i,\n                dragging: false,\n                direction: direction,\n                parent: parent,\n            };\n\n            pair[aGutterSize] = getGutterSize(\n                gutterSize,\n                i - 1 === 0,\n                false,\n                gutterAlign\n            );\n            pair[bGutterSize] = getGutterSize(\n                gutterSize,\n                false,\n                i === ids.length - 1,\n                gutterAlign\n            );\n\n            // if the parent has a reverse flex-direction, switch the pair elements.\n            if (\n                parentFlexDirection === 'row-reverse' ||\n                parentFlexDirection === 'column-reverse'\n            ) {\n                var temp = pair.a;\n                pair.a = pair.b;\n                pair.b = temp;\n            }\n        }\n\n        // Determine the size of the current element. IE8 is supported by\n        // staticly assigning sizes without draggable gutters. Assigns a string\n        // to `size`.\n        //\n        // Create gutter elements for each pair.\n        if (i > 0) {\n            var gutterElement = gutter(i, direction, element.element);\n            setGutterSize(gutterElement, gutterSize, i);\n\n            // Save bound event listener for removal later\n            pair[gutterStartDragging] = startDragging.bind(pair);\n\n            // Attach bound event listener\n            gutterElement[addEventListener](\n                'mousedown',\n                pair[gutterStartDragging]\n            );\n            gutterElement[addEventListener](\n                'touchstart',\n                pair[gutterStartDragging]\n            );\n\n            parent.insertBefore(gutterElement, element.element);\n\n            pair.gutter = gutterElement;\n        }\n\n        setElementSize(\n            element.element,\n            element.size,\n            getGutterSize(\n                gutterSize,\n                i === 0,\n                i === ids.length - 1,\n                gutterAlign\n            ),\n            i\n        );\n\n        // After the first iteration, and we have a pair object, append it to the\n        // list of pairs.\n        if (i > 0) {\n            pairs.push(pair);\n        }\n\n        return element\n    });\n\n    function adjustToMin(element) {\n        var isLast = element.i === pairs.length;\n        var pair = isLast ? pairs[element.i - 1] : pairs[element.i];\n\n        calculateSizes.call(pair);\n\n        var size = isLast\n            ? pair.size - element.minSize - pair[bGutterSize]\n            : element.minSize + pair[aGutterSize];\n\n        adjust.call(pair, size);\n    }\n\n    elements.forEach(function (element) {\n        var computedSize = element.element[getBoundingClientRect]()[dimension];\n\n        if (computedSize < element.minSize) {\n            if (expandToMin) {\n                adjustToMin(element);\n            } else {\n                // eslint-disable-next-line no-param-reassign\n                element.minSize = computedSize;\n            }\n        }\n    });\n\n    function setSizes(newSizes) {\n        var trimmed = trimToMin(newSizes);\n        trimmed.forEach(function (newSize, i) {\n            if (i > 0) {\n                var pair = pairs[i - 1];\n\n                var a = elements[pair.a];\n                var b = elements[pair.b];\n\n                a.size = trimmed[i - 1];\n                b.size = newSize;\n\n                setElementSize(a.element, a.size, pair[aGutterSize], a.i);\n                setElementSize(b.element, b.size, pair[bGutterSize], b.i);\n            }\n        });\n    }\n\n    function destroy(preserveStyles, preserveGutter) {\n        pairs.forEach(function (pair) {\n            if (preserveGutter !== true) {\n                pair.parent.removeChild(pair.gutter);\n            } else {\n                pair.gutter[removeEventListener](\n                    'mousedown',\n                    pair[gutterStartDragging]\n                );\n                pair.gutter[removeEventListener](\n                    'touchstart',\n                    pair[gutterStartDragging]\n                );\n            }\n\n            if (preserveStyles !== true) {\n                var style = elementStyle(\n                    dimension,\n                    pair.a.size,\n                    pair[aGutterSize]\n                );\n\n                Object.keys(style).forEach(function (prop) {\n                    elements[pair.a].element.style[prop] = '';\n                    elements[pair.b].element.style[prop] = '';\n                });\n            }\n        });\n    }\n\n    return {\n        setSizes: setSizes,\n        getSizes: getSizes,\n        collapse: function collapse(i) {\n            adjustToMin(elements[i]);\n        },\n        destroy: destroy,\n        parent: parent,\n        pairs: pairs,\n    }\n};\n\nexport default Split;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}